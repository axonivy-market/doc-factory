<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="ivy.addons.filemanager" xmlns="http://docbook.org/ns/docbook"
  xmlns:ns6="http://www.w3.org/1999/xlink" xmlns:ns5="http://www.w3.org/1998/Math/MathML"
  xmlns:ns4="http://www.w3.org/2000/svg" xmlns:ns3="http://www.w3.org/1999/xhtml"
  xmlns:ns="http://docbook.org/ns/docbook">
  <title>File Management System</title>
  <sect1 xml:id="ivy.addons.filemanager.introduction">
    <title>Introduction</title>
    <para>The goal of this document is to provide a small description of the file management system
      that has been developed for our Ivy RIAs applications. This file management system allows
      sharing, editing, versioning ... files in the Ivy RIA Applications.</para>
  </sect1>
  <sect1 xml:id="ivy.addons.filemanager.overview">
    <title>File management system overview</title>
    <para>The file management system is a set of Java Classes, Ivy Data Classes and Rich Dialogs
      that interoperates to be able to perform actions on files located on a Server File System or
      in a database just as they were located on the user's computer. You will find all those rich
      dialogs under <ns:code>ch.ivyteam.ivy.ivyaddons.filemanager</ns:code>. </para>
    <ns:warning>
      <para> The File Management System needs Java 6 at client side as a prerequisite. </para>
    </ns:warning>
    <para>The Users are going to share the same files among an application. They will be able to
      edit, print, copy, zip or download those files. They will also be able to upload some Files
      from their computer to the server.</para>
    <para>The file management system doesn't work with Ivy File Objects. It works with java.io.File
      objects and moreover with
      <ns:code>ch.ivyteam.ivy.addons.filemanager.DocumentOnServer</ns:code> Objects. A
      DocumentOnServer is just a DataClass representing a java.io.File within the file management
      system and contains some informations like the File size, a short description, the date and
      time of creation and last modification or if it is already edited (locked) by someone. All
      these meta informations are stored in a database. The documents can be stored as files on the
      fileset or as BLOB in the database.</para>
  </sect1>
  <sect1 xml:id="ivy.addons.filemanager.thefilemanagerRDC">
    <title>The FileManager RDC</title>
    <para>The FileManager Rich Dialog is the most important Rich Dialog of the file management
      system. </para>
    <para>It is visually composed by two main areas: a menu at the top and a split pane at the
      bottom. The split pane is divided in two regions: the folder explorer (RTree) and a RTable
      that lists the files contained into the selected folder. The top level Folder is given in the
      start method of the Filemanager Rich Dialog. The user cannot see the files and directories
      over this directory. The table displays some informations about the files: the name, the size,
      the Ivy User who created the File (by upload or by copy), the date and time of creation). It
      shows also in a tool tip the Ivy User who has last modified the file. It also shows a little
      Lock as icon if the file is currently edited, with the Ivy User name who is working with the
      file. If the user opens a file that is already edited by a third person, his changes are not
      going to be kept.</para>
    <mediaobject>
      <imageobject><imagedata fileref="images/FileManager/FileManager01.png"/></imageobject>
    </mediaobject>
    <para>All those files' informations are stored in a database.</para>
    <sect2 xml:id="ivy.addons.filemanager.initialization">
      <title>FileManager RDC Initialization</title>
      <para>This section describes how to start and use the FileManager. </para>
      <ns:warning>
        <para> The ivy users must have at least the two following rights:
            <ns:emphasis>ExternalDatabaseConfigurationReadMaxConnections</ns:emphasis> and
            <ns:emphasis>ExternalDatabaseConfigurationReadDatabaseConnectionConfiguration</ns:emphasis></para>
      </ns:warning>
      <sect3 xml:id="ivy.addons.filemanager.thefilemanagerRDC.configurationController"
          ><title>Starting with a ConfigurationController as input parameter</title><important>
          <para>Before the Ivy 4.3.2 version all the different settings were given as single
            parameters. With the increasing number of new features, the number of possible starts
            methods had grown. To avoid creating new start methods each time a new feature is
            embedded, we use an extendable ConfigurationController object. This object is just a
            container for start parameters and configurations. It is now the official and prefered
            way to start the file manager.</para>
        </important><para>A ConfigurationController is a Java Object that contains all the necessary
          informations to configure your FileManager at start. There are for the moment two
          Controllers, both in the <code>ch.ivyteam.ivy.addons.filemanager.configuration</code>
          package: <itemizedlist>
            <listitem>
              <para>the BasicConfigurationController. It holds all the necessary informations that
                are part of the configuration of a file management object. It contains for example
                the root path of the root directory, all the database table names, the ivy database
                connexion name, flags that activate or inactivate some features like the security,
                file versioning and so on... </para>
            </listitem>
            <listitem>
              <para>the FileManagerConfigurationController extends the BasicConfigurationController.
                It inherits all the settings of the BasicConfigurationController and holds some
                specific settings for the FileManager Rich Dialog. It contains for example flags
                that describe the visibility of some elements. The FileManager start method uses
                such an object.</para>
            </listitem>
          </itemizedlist> All the settings contained in such controllers are accessible through
          getter and setter methods. Here an example of such a configuration found in the IvyDemos
          in an Ivy context: <mediaobject>
            <imageobject><imagedata fileref="images/FileManager/configurationController.png"
            /></imageobject>
          </mediaobject>As you can see a lot of important settings like the tables names are blank.
          In fact those settings have already default values. The next table gives an overview of
          the settings contained in the controllers, of their default values if any and of the
          features they control. </para><table>
          <title>FileManager ConfigurationController settings</title>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>Setting</entry>
                <entry>Description</entry>
                <entry>Default value</entry>
                <entry>Feature</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>rootPath</entry>
                <entry>String, the path of the root directory</entry>
                <entry>Empty, so it must be set.</entry>
                <entry>Basic and obligatory</entry>
              </row>
              <row>
                <entry>useIvySystemDB</entry>
                <entry>Boolean, if true the File Manager RDC will use the Ivy System DB to store the
                  file's meta data information. If this flag is true, then you won't have the
                  possibility to use any avanced features like the security, file versioning and so
                  on....</entry>
                <entry>false</entry>
                <entry>Use the Ivy System DB and not an external database connexion. </entry>
              </row>
              <row>
                <entry>storeFilesInDB</entry>
                <entry>Boolean, If true, the files content is stored as BLOB into the Table which
                  name is set in filesContentTableName. If you set this flag to true, all the
                  advanced features will be able to work.</entry>
                <entry>false</entry>
                <entry>Files are stored in the database. </entry>
              </row>
              <row>
                <entry>activateFileTags</entry>
                <entry>Boolean, if true, the file tags feature will be activated. Flag
                  storeFilesInDB must be true to be able to activate this feature.</entry>
                <entry>false</entry>
                <entry><link linkend="ivy.addons.filemanager.tags">File tags</link></entry>
              </row>
              <row>
                <entry>activateFileType</entry>
                <entry>Boolean, if true, the file type feature will be activated. Flag
                  storeFilesInDB must be true to be able to activate this feature.</entry>
                <entry>false</entry>
                <entry><link linkend="ivy.addons.filemanager.types">File Types</link></entry>
              </row>
              <row>
                <entry>activateFileVersioning</entry>
                <entry>Boolean, if true the File version feature will be activated. Flag
                  storeFilesInDB must be true to be able to activate this feature.</entry>
                <entry>false</entry>
                <entry><link linkend="ivy.addons.filemanager.versioning">File
                versioning</link></entry>
              </row>
              <row>
                <entry>activateFileVersioningExtended</entry>
                <entry>Boolean, it is used to activate some extended functionalities in the file
                  version feature. If true the activateFileVersioning will be also activated. Flag
                  storeFilesInDB must be true to be able to activate this feature. </entry>
                <entry>false</entry>
                <entry><link linkend="ivy.addons.filemanager.versioning">File versioning</link> and
                  especially: <link linkend="ivy.addons.filemanager.versioningExt">File versioning
                    extended</link></entry>
              </row>
              <row>
                <entry>activateSecurity</entry>
                <entry>Boolean, if true the security management on the directories will be
                  activated. Flag storeFilesInDB must be true.</entry>
                <entry>false</entry>
                <entry><link linkend="ivy.addons.filemanager.security">Security</link></entry>
              </row>
              <row>
                <entry>adminRole</entry>
                <entry>String, The name of the ivy role that is allowed to manage the file manager
                  security.</entry>
                <entry>Value of global variable "xivy_addons_fileManager_admin_roleName"</entry>
                <entry><link linkend="ivy.addons.filemanager.security">Security</link></entry>
              </row>
              <row>
                <entry>fileActionHistoryConfiguration</entry>
                <entry>ch.ivyteam.ivy.addons.filemanager.database.fileaction.FileActionConfiguration
                  object. This object is used as configuration for the file action history tracking
                  feature. Please read the corresponding section for more details.</entry>
                <entry>Per default this feature is deactivated, and can only be activated if the
                  files are stored in the database.</entry>
                <entry><link linkend="ivy.addons.filemanager.fileactionhistory">File action history
                    tracking</link></entry>
              </row>
              <row>
                <entry>IvyDBConnectionName</entry>
                <entry>String. The name of the Ivy database Configuration name used to connect to
                  the database.</entry>
                <entry>Value of global variable "xivy_addons_fileManager_ivyDatabaseConnectionName"</entry>
                <entry>Basic. Not used if the useIvySystemDB flag is true.</entry>
              </row>
              <row>
                <entry>filesTableName</entry>
                <entry>String. The name of the Table that stores the information about the files. </entry>
                <entry>Value of global variable "xivy_addons_fileManager_fileMetaDataTableName"</entry>
                <entry>Basic. Not used if the useIvySystemDB flag is true.</entry>
              </row>
              <row>
                <entry>directoriesTableName</entry>
                <entry>String. The name of the DB Table that stores the directory structure.</entry>
                <entry>Value of global variable "xivy_addons_fileManager_directoriesTableName"</entry>
                <entry>Files are stored in the database. Not used if the storeFilesInDB flag is
                  false.</entry>
              </row>
              <row>
                <entry>filesContentTableName</entry>
                <entry>String. The name of the DB Table that stores the file content.</entry>
                <entry>Value of global variable "xivy_addons_fileManager_fileContentTableName"</entry>
                <entry>Files are stored in the database. Not used if the storeFilesInDB flag is
                  false.</entry>
              </row>
              <row>
                <entry>filesVersionTableName</entry>
                <entry>String. The name of the DB Table that stores the file versions information.</entry>
                <entry>Value of global variable
                  "xivy_addons_fileManager_fileVersioningMetaDataTableName"</entry>
                <entry><link linkend="ivy.addons.filemanager.versioning">File
                versioning</link></entry>
              </row>
              <row>
                <entry>filesVersionContentTableName</entry>
                <entry>String. The name of the DB Table that stores the file versions content.</entry>
                <entry>Value of global variable
                  "xivy_addons_fileManager_fileVersioningContentTableName"</entry>
                <entry><link linkend="ivy.addons.filemanager.versioning">File
                versioning</link></entry>
              </row>
              <row>
                <entry>fileTagsTableName</entry>
                <entry>String. Name of the DB Table that stores the file tags.</entry>
                <entry>Value of the "xivy_addons_fileManager_fileTagsTableName" global variable.</entry>
                <entry><link linkend="ivy.addons.filemanager.tags">File tags</link></entry>
              </row>
              <row>
                <entry>fileTypeTableName</entry>
                <entry>String. Name of the DB Table that stores the file types.</entry>
                <entry>Value of the xivy_addons_fileManager_fileTypesTableName global variable.</entry>
                <entry><link linkend="ivy.addons.filemanager.types">File Types</link></entry>
              </row>
              <row>
                <entry>databaseSchemaName</entry>
                <entry>String. The name of the database schema that may be used if the tables are
                  stored in a schema.</entry>
                <entry>Value of the xivy_addons_fileManager_databaseSchemaName global variable.</entry>
                <entry>Basic</entry>
              </row>
              <row>
                <entry>maxFileUploadSize</entry>
                <entry>int. The max file size the user is allowed to upload in Kb. 0 means no limit.</entry>
                <entry>0</entry>
                <entry>Set the maximum file size a user can upload.</entry>
              </row>
              <row>
                <entry>allowUserToSetDocumentFileTypes*</entry>
                <entry>Boolean. Flag used if the file type feature is activated to allow the user to
                  choose the types manually.</entry>
                <entry>false</entry>
                <entry><link linkend="ivy.addons.filemanager.types">File Types</link></entry>
              </row>
              <row>
                <entry>showFileTypeManagement*</entry>
                <entry>Boolean.Flag used if the file type feature is activated to allow the user to
                  manage the types.</entry>
                <entry>false</entry>
                <entry><link linkend="ivy.addons.filemanager.types">File Types</link></entry>
              </row>
              <row>
                <entry>showFileTypeInTable*</entry>
                <entry>Boolean. Flag used if the file type feature is activated to show the types in
                  a column.</entry>
                <entry>true</entry>
                <entry><link linkend="ivy.addons.filemanager.types">File Types</link></entry>
              </row>
              <row>
                <entry>allowUserToSetDocumentTags*</entry>
                <entry>Boolean. Flag used if the file tag feature is activated to allow the user to
                  edit the tags manually.</entry>
                <entry>false</entry>
                <entry><link linkend="ivy.addons.filemanager.tags">File tags</link></entry>
              </row>
              <row>
                <entry>showFileHistoryMenuItem*</entry>
                <entry>Boolean. Flag used if the file action history tracking feature is activated
                  to allow the user to view the history of the files..</entry>
                <entry>true</entry>
                <entry><link linkend="ivy.addons.filemanager.fileactionhistory">File action history
                    tracking</link></entry>
              </row>
              <row>
                <entry>toolBarVisible*</entry>
                <entry>Boolean. If true then the tool bar is visible.</entry>
                <entry>true</entry>
                <entry>Misc.</entry>
              </row>
              <row>
                <entry>folderTreeVisible*</entry>
                <entry>Boolean. If true then the folder tree is visible.</entry>
                <entry>true</entry>
                <entry>Misc.</entry>
              </row>
              <row>
                <entry>diplayFilesRecursively*</entry>
                <entry>Boolean. If true then the files are displayed recursively in the directories
                  structure.</entry>
                <entry>false</entry>
                <entry>Misc.</entry>
              </row>
              <row>
                <entry>advancedActionsEnabled*</entry>
                <entry>Boolean. Flag used for some actions, should not be in use now, may be again
                  in the future.</entry>
                <entry>true</entry>
                <entry>Misc.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <annotation>
          <para>* All these settings are located in the FileManagerConfigurationController.</para>
        </annotation>
      </sect3>
      <sect3>
        <title>Starting the FileManager with the old and deprecated start methods.</title>
        <para>As already mentioned in the previous section all the described start methods here
          should be concidered as deprecated. They still work but do not provide the flexibility and
          all the features provided by the ConfigurationController. </para>
        <para>There are two major informations to provide the FileManager: the <ns:emphasis>server
            path</ns:emphasis> representing the top directory that will be displayed, and the
            <ns:emphasis>database informations</ns:emphasis> to be able to store the files
          informations.</para>
        <para>These parameters can be given to the file manager through start methods or with the
          use of global variables. You will find these indications in next two sub paragraphs. </para>
        <sect4>
          <title>The server path</title>
          <para>The server path is provided as parameter in the start methods of the RDC. This
            parameter can be an empty String. In such a case nothing is going to be displayed and
            the user will not be able to do anything. You can set the server Path dynamically at a
            delayed time with the <ns:code>setServerPath(String _serverPath)</ns:code> method. </para>
          <para>If you provide a path like "Test/dir1/", the directories and theirs files are going
            to be located at the root of the Ivy Server installation directory. If the path is like
            "/test/dir1/...", the directories and theirs files are going to be located at the root
            of the drive. You can also provide a path like "C:/test/...".</para>
          <para>You can connect to a file share server path with for example
              <ns:emphasis>"//ServerShareName/dir1/"</ns:emphasis>. In such a case the file sharing
            must be configured so that the Ivy Server User can connect to it. </para>
        </sect4>
        <sect4>
          <title>The database settings</title>
          <sect5>
            <title>If the files are stored on a server File System...</title>
            <para>You can use the IvySystem DB to store the informations about the files, or you can
              use an external Database System.</para>
            <para>If your table is located on the Ivy System Database you can start the FileManager
              with its <ns:code>startWithServerPathAndUseIvySystemDB(String _serverPath)</ns:code>
              start method. It is the easiest way to use the FileManager. </para>
            <para>If you use an external database you have to provide more informations:<itemizedlist>
                <listitem>
                  <para>First you have to configure an Ivy Database Configuration in your project
                    (see the Ivy Documentation related to this point).</para>
                </listitem>
                <listitem>
                  <para>You have to create the "UploadedFiles" Table. Please refer to the database
                    definition section.</para>
                </listitem>
                <listitem>
                  <para>Then use one of the following start methods:</para>
                </listitem>
              </itemizedlist></para>
            <table>
              <title><code>FileManager Start methods</code> using an Ivy database configuration</title>
              <tgroup cols="3">
                <thead>
                  <row>
                    <entry>Start method name</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry><ns:code>startWithServerPathAndIvyDbConnectionNameAndDbTableName</ns:code></entry>
                    <entry>Starts with serverPath / IvyDBConnectionName / DBTableName. The server
                      path is the root directory in the server file system where the documents are
                      going to be uploaded and found. The IvyDBConnectionName is the name of the Ivy
                      Database Connection configuration, used to store the files informations. (Per
                      default "FileManager"). The DBTableName is the Table name where the files
                      informations are going to be stored. Per Default "uploadedfiles"</entry>
                  </row>
                  <row>
                    <entry><ns:code>startWithServerPathAndIvyDbConnectionNameAndDbTableNameAndDBSchemaName</ns:code></entry>
                    <entry>If you use a PostGreSQL database, you can provide a schema name also. If
                      no Schema is provided, the default used will be "public".</entry>
                  </row>
                  <row>
                    <entry><ns:code>startWithServerPath</ns:code></entry>
                    <entry>This start method only takes the serverPath as Parameter. In this case
                      you have to obligatory provide a database configuration named "FileManager"
                      and your table has to be named "uploadedfiles".</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
            <para>You can also start the FileManager with the
                <ns:code>startWithConfigInGlobalVariables(String _serverPath)</ns:code> start method
              and configure the FielManager with the use of global variables provided for that
              purpose. (<link linkend="ivy.addons.filemanager.thefilemanagerRDC.globalVariables"
                >This section describes the way to configure the Filemanager with global
              variables)</link>.</para>
            <ns:warning>
              <para>For the moment four kinds of external databases were fully tested: MS SQL 2005
                and 2008, MySQL, PostGRESQL and Oracle 11g.</para>
            </ns:warning>
          </sect5>
          <sect5 xml:id="ivy.addons.filemanager.thefilemanagerRDC.filesAsBlob">
            <title> The files' content is stored in a database as BLOB or VARBINARY field (depending
              on your database vendor) </title>
            <para>This feature is not supported within the Ivy System Database. You must store the
              files informations in an external database.</para>
            <para> Instead of having all the files and directory structure stored in a file system,
              you can store all of these informations in a database. For that you will need 3
              tables: <itemizedlist>
                <listitem>
                  <para> the files meta informations table (per default uploadedfiles), </para>
                </listitem>
                <listitem>
                  <para> the file content table (per default filemanagercontent),</para>
                </listitem>
                <listitem>
                  <para> the directory structure table (per default filemanagerdirectory),</para>
                </listitem>
              </itemizedlist></para>
            <para>Please refer to the database definition section.</para>
            <para>To be able to start the filemanager with the filecontent stored in the database,
              you have to use the start method corresponding to the following parameters, or you can
              set the <ns:code>xivy_addons_fileManager_activateFileContentInDatabase global variable
                to "1".</ns:code>
            </para>
            <table>
              <title><code>FileManager Start method</code> enabling the file storage in database</title>
              <tgroup cols="3">
                <thead>
                  <row>
                    <entry>Parameter name</entry>
                    <entry>Parameter type</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>serverPath</entry>
                    <entry>String</entry>
                    <entry>The entry Path of the FileManager</entry>
                  </row>
                  <row>
                    <entry>useIvySystemDB</entry>
                    <entry>Boolean</entry>
                    <entry>If true, the files informations are going to be stored in the Ivy System
                      Database. In such a case the file content storage in the database is not
                      supported. If false you will use a separate external database (see
                      ivyDBConnectionName, schemaName, FileTableName, DirTableName
                    parameters)</entry>
                  </row>
                  <row>
                    <entry>ivyDBConnectionName</entry>
                    <entry>String</entry>
                    <entry>If use of external DB, this is the user friendly Ivy connection to the
                      DB.</entry>
                  </row>
                  <row>
                    <entry>schemaName</entry>
                    <entry>String</entry>
                    <entry>If use of external DB with engine that supports Schemas like
                    PostGreSQL</entry>
                  </row>
                  <row>
                    <entry>fileTableName</entry>
                    <entry>String</entry>
                    <entry>The name of the table that stores the informations relative to the
                    files</entry>
                  </row>
                  <row>
                    <entry>fileContentTableName</entry>
                    <entry>String</entry>
                    <entry>The name of the table that stores the file content</entry>
                  </row>
                  <row>
                    <entry>dirTableName</entry>
                    <entry>String</entry>
                    <entry>The name of the table that stores the informations relative to the
                      directories (only necessary if the files content is stored in the fileTable
                      (see storeFilesInDB parameter)</entry>
                  </row>
                  <row>
                    <entry>storeFilesInDB</entry>
                    <entry>Boolean</entry>
                    <entry>If true, the file content will be also stored in the fileTable. If the
                      "useIvySystemDB" parameter is true, the "storeFilesInDB will always be
                    false."</entry>
                  </row>
                  <row>
                    <entry>activateSecurity</entry>
                    <entry>Boolean</entry>
                    <entry>If true, the security on the directories will be activated (See the
                      section about this feature to get mor informations). The security Informations
                      are stored in the dirTable. This only works for the moment with storeFilesInDB
                      parameter to true. Parameter storeFilesInDB to false implies this parameter to
                      false also.</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
            <para>You can also start the FileManager with the
                <ns:code>startWithConfigInGlobalVariables(String _serverPath)</ns:code> start method
              and configure the FielManager with the use of global variables provided for that
              purpose. (<link linkend="ivy.addons.filemanager.thefilemanagerRDC.globalVariables">The
                next section describes the way to configure the Filemanager with global
              variables)</link>.</para>
          </sect5>
          <sect5 xml:id="ivy.addons.filemanager.thefilemanagerRDC.globalVariables">
            <title>Starting the fileManager with the configuration stored as global variables</title>
            <para>Some global variables stored in the IvyAddons Configuration can be used to
              configured the FileManager if you start it with the
              startWithConfigInGlobalVariables(String _serverPath) start method. These global
              variables are: <itemizedlist>
                <listitem>
                  <para>xivy_addons_fileManager_activateUseOfIvySystemDatabase: if set to "1" the
                    fileManager will use the Ivy System database to store the files' information.
                    Activating this feature disables the File Versioning, the security and the
                    storage of the files as BLOB. The files are stored "physically" on the server
                    file system.</para>
                </listitem>
                <listitem>
                  <para>xivy_addons_fileManager_activateFileContentInDatabase: if set to "1" the
                    files' content will be stored as BLOB in the file_content table. Else, the files
                    are going to be stored on the fileset and the security and file versioning
                    features are automatically disabled.</para>
                </listitem>
                <listitem>
                  <para>xivy_addons_fileManager_activateFileVersioning: if set to "1" the file
                    Versioning feature will be activated (<link
                      linkend="ivy.addons.filemanager.versioning">This section describes this
                      feature</link>). Only supported if the file content is stored as BLOB.</para>
                </listitem>
                <listitem>
                  <para>xivy_addons_fileManager_activateSecurity: if set to "1" the file Security
                    feature will be activated (<link linkend="ivy.addons.filemanager.security">The
                      next section describes this feature</link>). Only supported if the file
                    content is stored as BLOB.</para>
                </listitem>
                <listitem>
                  <para>xivy_addons_fileManager_admin_roleName: this variable is used to store the
                    iyv role name of the file manager security administrator(<link
                      linkend="ivy.addons.filemanager.security">The next section describes this
                      feature</link>). Users having this role will be able to administrate the
                    FileManager security.</para>
                </listitem>
                <listitem>
                  <para>xivy_addons_fileManager_ivyDatabaseConnectionName: this is the name of ivy
                    database connection that is connected with the database containing the
                    filemanager's tables..</para>
                </listitem>
                <listitem>
                  <para>xivy_addons_fileManager_fileMetaDataTableName: this is the name of the
                    database table containing the files meta data like creation user, date of
                    creation etc....</para>
                </listitem>
                <listitem>
                  <para>xivy_addons_fileManager_directoriesTableName: this is the name of the
                    database table containing the directories structure. Only used if the file
                    content is stored as BLOB.</para>
                </listitem>
                <listitem>
                  <para>xivy_addons_fileManager_fileContentTableName: this is the name of the
                    database table containing the files' content. Only used if the file content is
                    stored as BLOB.</para>
                </listitem>
                <listitem>
                  <para>xivy_addons_fileManager_fileVersioningContentTableName: this is the name of
                    the database table that contains all the file versions ' content. Only used if
                    the file content is stored as BLOB and the File Versioning Feature is
                  activated.</para>
                </listitem>
                <listitem>
                  <para>xivy_addons_fileManager_fileVersioningMetaDataTableName: this is the name of
                    the database table that contains the informations about the different versions
                    of the files. Only used if the file content is stored as BLOB and the File
                    Versioning Feature is activated.</para>
                </listitem>
                <listitem>
                  <para>xivy_addons_fileManager_databaseSchemaName: This is the name of the database
                    Schema where the file manager's table are located. Most of the DB Engines like
                    PostgreSQL support this feature. Default is an empty String: no Schema will be
                    predefined and the default one will be used if applicable. </para>
                </listitem>
              </itemizedlist></para>
          </sect5>
        </sect4>
      </sect3>
    </sect2>
    <sect2 xml:id="ivy.addons.filemanager.security">
      <title>Security manager</title>
      <para> If the files content are stored in the database, you can activate the security embedded
        in the filemanager. The best way to do that is to use <link
          linkend="ivy.addons.filemanager.thefilemanagerRDC.configurationController">the
          ConfigurationController start method.</link> You can also use the start method described
          <link linkend="ivy.addons.filemanager.thefilemanagerRDC.filesAsBlob">in this
        paragraph</link>, or you can set the
        <ns:code>xivy_addons_fileManager_activateSecurity</ns:code> global variable to "1" and use
        the <code>startWithConfigInGlobalVariables</code> start method described previously <link
          linkend="ivy.addons.filemanager.thefilemanagerRDC.globalVariables">in this
        paragraph</link>.</para>
      <para> The security is based on the Ivy Roles. The filemanager security administrator has all
        the roles and can manage the security of the other roles. This role is set in the following
        global variable: </para>
      <mediaobject>
        <imageobject><imagedata fileref="images/FileManager/globalVariable_admin.png"
        /></imageobject>
      </mediaobject>
      <para> If the current Ivy user has the administrator role, he will see the following button
        above the directories Tree: </para>
      <mediaobject>
        <imageobject><imagedata fileref="images/FileManager/adminButton.png"/></imageobject>
      </mediaobject>
      <para> The security manager appears as described on the following picture: </para>
      <mediaobject>
        <imageobject><imagedata fileref="images/FileManager/adminPanel.png"/></imageobject>
      </mediaobject>
      <para> The following picture shows some of the possible results of the security settings: </para>
      <mediaobject>
        <imageobject><imagedata fileref="images/FileManager/securityResult.png"/></imageobject>
      </mediaobject>
      <para>The security is controlled by a securityController java Object. This Controller can be
        obtained with the new FileManager <code>getFileManagerSecurityController()</code> method.
        The returned Object is a
          <code>ch.ivyteam.ivy.addons.filemanager.database.security.AbstractDirectorySecurityController</code>.
        Its API is public and well documented. </para>
      <important>
        <para>New created directories will have the same rights as their direct parent directory. If
          the rights on the parent directory are changed after the child directory creation, the
          child directory rights remain unchanged.</para>
        <para>If a new Root directory is created, then the role everybody will be able to open the
          directory, to write and delete the files. For example if you start the filemanager with
          files/meetings and the root directory "files" does not exist, then it will be
          automatically created with the above listed rights. The directory "meetings" will be
          created with the "files" same rights.</para>
      </important>
    </sect2>
    <sect2 xml:id="ivy.addons.filemanager.versioning">
      <title>File Versioning</title>
      <para>A new feature has been also added to the filemanager: the possibility to create files
        versions. A prerequesite is that the files content is stored in the database.</para>
      <para>To be able to activate this feature use <link
          linkend="ivy.addons.filemanager.thefilemanagerRDC.configurationController">the
          ConfigurationController start method.</link> You can also to <ns:code>set the
          xivy_addons_fileManager_activateFileVersioning to "1".</ns:code> and start the FileManager
        as described <link linkend="ivy.addons.filemanager.thefilemanagerRDC.globalVariables">in
          this paragraph</link></para>
      <para> For this feature you will need a more complete database structure (<link
          linkend="ivy.addons.filemanager.dbstructure">Please refer to the database definition
          section.</link>): <itemizedlist>
          <listitem>
            <para> The files meta informations table (per default uploadedfiles),<emphasis
                role="bold"> with a new field (versionnumber (int))</emphasis></para>
          </listitem>
          <listitem>
            <para> The file content table (per default filemanagercontent),</para>
          </listitem>
          <listitem>
            <para> The directory structure table (per default filemanagerdirectory),</para>
          </listitem>
          <listitem>
            <para> The file versions table (per default file_versions),</para>
          </listitem>
          <listitem>
            <para> The file versions content table (per default file_version_content),</para>
          </listitem>
        </itemizedlist></para>
      <para>The File Versioning system is controlled through a FileVersioningController java object
        (ch.ivyteam.ivy.addons.filemanager.database.versioning.FileVersioningController.java). You
        can get a reference on this object by calling the FileManager's
        getFileVersioningController() method. Its public API is
        documented.<literallayout>
        If you start the fileManager and activate the versioning feature, a new information will be shown:
        <inlinemediaobject><imageobject><imagedata fileref="images/FileManager/fileversioning1.png"/></imageobject></inlinemediaobject>
        
        With the context menu you can create a new version of the selected file or you can open the
        existing versions.
        <inlinemediaobject><imageobject><imagedata fileref="images/FileManager/fileversioning2.png"/></imageobject></inlinemediaobject>
        
        The old files versions can be opened but you cannot edit their content in the file manager. 
        <inlinemediaobject><imageobject><imagedata fileref="images/FileManager/fileversioning3.png"/></imageobject></inlinemediaobject>
        </literallayout></para>
      <sect3 xml:id="ivy.addons.filemanager.versioningExt">
        <title>File versioning extended feature</title>
        <para>This feature extends the file versioning and adds some default behaviors. To be able
          to activate this feature use <link
            linkend="ivy.addons.filemanager.thefilemanagerRDC.configurationController">the
            ConfigurationController start method</link>, and set the activateFileVersioningExtended
          flag to true.</para>
        <para>The user cannot create any file version manually with the "new version" context menu.
          This menu is not shown anymore.</para>
        <para>The exact use case is:</para>
        <para>1. The user opens a file in edit mode,</para>
        <para>2. The user modifies the file and save it. A new version will be automatically
          created. The previous version is the file as it was found by the user before editing it.</para>
        <para>3. If the user goes on editing and saves the file several times without releasing the
          lock, no new version will be created.</para>
        <para>4. The user releases the lock on the file, opens it in edit modus again and changes
          it: a new version will be again created.</para>
        <para>The duration in which a user gets a file lock can be seen as "edit session". All the
          saved changes within the same edit session will be saved in the same new version.</para>
      </sect3>
    </sect2>
    <sect2 xml:id="ivy.addons.filemanager.types">
      <title>File Types feature</title>
      <para>A file type is a special kind of file meta-information. It describes the business type
        of the file (CV, Bill etc…). The DocumentOnServer Dataclass has a filetype attribute from
        type ch.ivyteam.ivy.addons.filemanager.FileType (dataClass). Here is the description of the
        FileType class:</para>
      <literallayout>
        A FileType represents an arbitrary document type within an application.
        This Object Class is mainly used by the FileTypesController. The DocumentOnServer DataClass has a FileType attribute. 
        This can be a CV for eRecruitment, a bill, a letter_abc etc...
        A file type has a name and a corresponding optional application name.
        The applicationName can be the name of a module or of an Ivy application. (ex: "eRecruitment", "TalentManagement", "xjob" etc...).
        The applicationName allows to distinguish fileTypes with the same name.
        For example the Type "CV" can be used for eRecruitment and also for a company internal talent management system. In that case one may want to distinguish CVs from candidates and CVs from employees. That is possible with this applicationName attribute.
        If a FileType does not have any application name, this type can be seen has generic (cross applications). 
        You can also use file types without application name if you use them in a single application context.
        Important: The file types name and application name association must be unique (SQL constraint: "UNIQUE(name,appname)").
      </literallayout>
      <para> The file type feature is controlled by a Java controller
          object:<code>ch.ivyteam.ivy.addons.filemanager.database.filetype.FileTypesController</code>
        that can be instantiated with a BasicConfigurationController object. The API of this
        controller is documented in javadoc style.</para>
      <para>To be able to use this feature you have to start the file manager with a
        ConfigurationController object just as it is described <link
          linkend="ivy.addons.filemanager.thefilemanagerRDC.configurationController">in this
        section</link>. The following settings and details are mandatory: <itemizedlist>
          <listitem>
            <para>The files content must be stored as BLOB in the database, so the
              ConfigurationController "storeFilesInDB" flag must be true.</para>
          </listitem>
          <listitem>
            <para>The ConfigurationController "activateFileType" flag must be true.</para>
          </listitem>
          <listitem>
            <para>The name of the filetypes table must be at least given in the
              "xivy_addons_fileManager_fileTypesTableName" global variable.</para>
          </listitem>
          <listitem>
            <para>The filetypes table must exist and the field "filetypeid BIGINT NULL" must exist
              in the files table. (<link linkend="ivy.addons.filemanager.dbstructure">Please refer
                to the database definition section.</link>)</para>
          </listitem>
        </itemizedlist> The FileManagerConfigurationController contains the following settings that
        are also from interest: <table>
          <title>FileManagerConfigurationController settings for the file types allowed actions</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Setting</entry>
                <entry>Description</entry>
                <entry>Default value</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>allowUserToSetDocumentFileTypes</entry>
                <entry>Boolean. Flag used if the file type feature is activated to allow selecting
                  the types manually. If the security is activated, then the user must also have
                  files editing rights to be able to set the document types.</entry>
                <entry>false</entry>
              </row>
              <row>
                <entry>showFileTypeManagement</entry>
                <entry>Boolean. Flag used if the file type feature is activated to allow managing
                  the types. If the security is activated, then the user must also have the
                  fileManager admin role to be able to manage the document types.</entry>
                <entry>false</entry>
              </row>
              <row>
                <entry>showFileTypeInTable</entry>
                <entry>Boolean. Flag used if the file type feature is activated to show the types in
                  a column. If false, the types column won't appear and the only way to see the type
                  is the document's toolip.</entry>
                <entry>true</entry>
              </row>
            </tbody>
          </tgroup>
        </table> If the file type column is visible, you will see the types in the file Table: <mediaobject>
          <imageobject><imagedata fileref="images/FileManager/fileTypeColumn.png"/></imageobject>
        </mediaobject> The file type is also visible in the document tooltip: <mediaobject>
          <imageobject><imagedata fileref="images/FileManager/fileTypeTooltip.png"/></imageobject>
        </mediaobject> Depending on the user rigths if the security is activated and on the
        ConfigurationController settings, the user may be able to set and manage the filetypes with
        the following context menu items: <mediaobject>
          <imageobject><imagedata fileref="images/FileManager/fileTypeMenu.png"/></imageobject>
        </mediaobject> The file type chooser allows selecting a file type manually for the selected
        document. It is a Rich Dialog ch.ivyteam.ivy.addons.filemanager.filetype.FileTypesDialog
        started with the <code>startAsFileTypeChooser(BasicConfigurationController)</code> method. <mediaobject>
          <imageobject><imagedata fileref="images/FileManager/fileTypeChooser.png"/></imageobject>
        </mediaobject> The file type manager allows administrating the file types manually. It is
        the same RDC as the chooser but started with the
          <code>startAsFileTypeManager(BasicConfigurationController)</code> method. <mediaobject>
          <imageobject><imagedata fileref="images/FileManager/fileTypeManager.png"/></imageobject>
        </mediaobject></para>
    </sect2>
    <sect2 xml:id="ivy.addons.filemanager.tags">
      <title>File Tags feature</title>
      <para>A fileTag is a String tag that can contains any information. Each tag refers to a
        precise document. Each document can have from 0 to n tags. Example: you can "tag" all the
        documents attached to a particular candidate with the following tag "candidate.id.346". The
        convention used for tags is free.</para>
      <para> The file tag feature is controlled by a Java controller
          object:<code>ch.ivyteam.ivy.addons.filemanager.database.filetag.FileTagsController</code>
        that can be instantiated with a BasicConfigurationController object. The API of this
        controller is documented in javadoc style.</para>
      <para>To be able to use this feature you have to start the file manager with a
        ConfigurationController object just as it is described <link
          linkend="ivy.addons.filemanager.thefilemanagerRDC.configurationController">in this
        section</link>. The following settings and details are mandatory: <itemizedlist>
          <listitem>
            <para>The files content must be stored as BLOB in the database, so the
              ConfigurationController "storeFilesInDB" flag must be true.</para>
          </listitem>
          <listitem>
            <para>The ConfigurationController "activateFileTags" flag must be true.</para>
          </listitem>
          <listitem>
            <para>The name of the filetags table must be at least given in the
              "xivy_addons_fileManager_fileTagsTableName" global variable.</para>
          </listitem>
          <listitem>
            <para>The filetags table must exist. (<link linkend="ivy.addons.filemanager.dbstructure"
                >Please refer to the database definition section.</link>)</para>
          </listitem>
        </itemizedlist> The FileManagerConfigurationController contains the following setting that
        is also from interest: <table>
          <title>FileManagerConfigurationController setting for the file tags allowed actions</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Setting</entry>
                <entry>Description</entry>
                <entry>Default value</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>allowUserToSetDocumentTags</entry>
                <entry>Boolean. Flag used if the file tag feature is activated to allow the user to
                  edit the tags manually. If the security is activated, then the user must also have
                  files editing rights to be able to set the document tags.</entry>
                <entry>false</entry>
              </row>
            </tbody>
          </tgroup>
        </table> The file tags are not directly visible in the table. You have to use the following
        context menu item: <mediaobject>
          <imageobject><imagedata fileref="images/FileManager/fileTagsMenuItem.png"/></imageobject>
        </mediaobject> Depending on the user rights if the security is activated and on the
        ConfigurationController settings, the user will be able to set the tags manually. </para>
      <para>Here the tags window allows editing the tags
          (<code>ch.ivyteam.ivy.addons.filemanager.tag.FileTagDialog</code> rich dialog): <mediaobject>
          <imageobject><imagedata fileref="images/FileManager/fileTagsManager.png"/></imageobject>
        </mediaobject></para>
      <para>Here the tags window shows just the tags: <mediaobject>
          <imageobject><imagedata fileref="images/FileManager/fileTagsReader.png"/></imageobject>
        </mediaobject></para>
    </sect2>
    <sect2 xml:id="ivy.addons.filemanager.fileactionhistory">
      <title>File action history tracking feature</title>
      <para>This feature offers the possibility to track and reference all the actions the users can
        perform on the files. If this feature is activated, you have the possibility to choose the
        actions that have to be tracked. For example, you can choose to track the "file content
        changed (file edition)" actions but not to register the "file opened" actions. Each time a
        "tracked action" is performed, a new file action history entry is written in the file action
        history table. Each history entry contains the file id on which the action was made, the
        action type, the Ivy user name and the full user name who has done the action, the date and
        the time of the action and a description field used witrh some actions to save more
        information.</para>
      <para> The file action history feature is controlled by a Java controller
          object:<code>ch.ivyteam.ivy.addons.filemanager.database.fileaction.FileActionHistoryController</code>
        that can be instantiated with a FileActionConfiguration object. The API of this controller
        is documented in javadoc style. Such a FileActionConfiguration object has been included in
        the BasicConfigurationController object. This FileActionConfiguration contains all the
        necessary parameters to control this feature. Per default it is not activated. Please read
        the following table to learn more about this configuration:</para>
      <table>
        <title>File action history ConfigurationController settings</title>
        <tgroup cols="4">
          <thead>
            <row>
              <entry>Setting</entry>
              <entry>Description</entry>
              <entry>Default value</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>activateFileActionHistory</entry>
              <entry>Boolean, activate - deactivate the file action history feature.</entry>
              <entry>Default is false. It is also automatically false within the FileManager
                Configuration object if the storeFilesInDB field is false</entry>
            </row>
            <row>
              <entry>ivyDBConnectionName</entry>
              <entry>String. The name of the Ivy database Configuration name used to connect to the
                database. It is automatically set within the FileManager configuration controller,
                so that you don't have to extra care about it. </entry>
              <entry>Value of global variable
              "xivy_addons_fileManager_ivyDatabaseConnectionName"</entry>
            </row>
            <row>
              <entry>schemaName</entry>
              <entry>String. The name of the database schema that may be used if the tables are
                stored in a schema. It is automatically set within the FileManager configuration
                controller, so that you don't have to extra care about it. </entry>
              <entry>Value of the xivy_addons_fileManager_databaseSchemaName global
              variable.</entry>
            </row>
            <row>
              <entry>fileActionTypeTableName</entry>
              <entry>The name of the DB Table that stores the file action history types. For example
                the "file created", "file printed" etc. types. The common types are already defined
                and can be found as INSERT SQL scripts in the corresponding cms SQL DDL document.
                (Please refer to <link linkend="ivy.addons.filemanager.dbstructure">the database
                  definition paragraph</link>)</entry>
              <entry>Value of global variable
              "xivy_addons_fileManager_fileActionTypeTableName"</entry>
            </row>
            <row>
              <entry>fileActionHistoryTableName</entry>
              <entry>The name of the DB Table that stores the file action history entries.</entry>
              <entry>Value of global variable
              "xivy_addons_fileManager_fileActionHistoryTableName"</entry>
            </row>
            <row>
              <entry>changeFileDescriptionTracked</entry>
              <entry>Boolean. If set to true and the activateFileActionHistory parameter is also
                true, then changing the desription of a file will create a new history entry. </entry>
              <entry>Default is true</entry>
            </row>
            <row>
              <entry>copyFileTracked</entry>
              <entry>Boolean. If set to true and the activateFileActionHistory parameter is also
                true, then copying and pasting a file will create a new history entry. The path of
                the new copied File will be stored in the description of the file action history
                entry.</entry>
              <entry>Default is true</entry>
            </row>
            <row>
              <entry>deleteFileTracked</entry>
              <entry>Boolean. If set to true and the activateFileActionHistory parameter is also
                true, then deleting a file will create a new history entry. You have to notice that
                deleting a file will not delete its history, so that it remains possible to keep a
                complete view on the action history of a user for example. The path of the deleted
                File will be stored in the description of the file action history entry.</entry>
              <entry>Default is true</entry>
            </row>
            <row>
              <entry>downloadFileTracked</entry>
              <entry>Boolean. If set to true and the activateFileActionHistory parameter is also
                true, then downloading a file will create a new history entry. </entry>
              <entry>Default is true</entry>
            </row>
            <row>
              <entry>editFileTracked</entry>
              <entry>Boolean. If set to true and the activateFileActionHistory parameter is also
                true, then changing the content of a file will create a new history entry. </entry>
              <entry>Default is true</entry>
            </row>
            <row>
              <entry>fileCreationTracked</entry>
              <entry>Boolean. If set to true and the activateFileActionHistory parameter is also
                true, then creating a new file will create a new history entry. </entry>
              <entry>Default is true</entry>
            </row>
            <row>
              <entry>printFileTracked</entry>
              <entry>Boolean. If set to true and the activateFileActionHistory parameter is also
                true, then printing a file will create a new history entry. </entry>
              <entry>Default is true</entry>
            </row>
            <row>
              <entry>readFileTracked</entry>
              <entry>Boolean. If set to true and the activateFileActionHistory parameter is also
                true, then opening a file will create a new history entry. </entry>
              <entry>Default is true</entry>
            </row>
            <row>
              <entry>renameFileTracked</entry>
              <entry>Boolean. If set to true and the activateFileActionHistory parameter is also
                true, then changing the desription of a file will create a new history entry. The
                old name and new file name will be stored in the description of the file action
                history entry.</entry>
              <entry>Default is true</entry>
            </row>
            <row>
              <entry>moveFileTracked</entry>
              <entry>Boolean. If set to true and the activateFileActionHistory parameter is also
                true, then moving a file will create a new history entry. The old path and new file
                path will be stored in the description of the file action history entry.</entry>
              <entry>Default is true</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>To be able to use this feature you have to start the file manager with a
        ConfigurationController object just as it is described <link
          linkend="ivy.addons.filemanager.thefilemanagerRDC.configurationController">in this
        section</link>. The following settings and details are mandatory: <itemizedlist>
          <listitem>
            <para>The files content must be stored as BLOB in the database, so the
              ConfigurationController "storeFilesInDB" flag must be true.</para>
          </listitem>
          <listitem>
            <para>The FileActionConfiguration "activateFileActionHistory" flag must be true.</para>
          </listitem>
          <listitem>
            <para>The name of the fileactiontype and fileactionhistory table names must be at least
              given in the corresponding global variable.</para>
          </listitem>
          <listitem>
            <para>The fileactiontype and fileactionhistory tables must exist. (<link
                linkend="ivy.addons.filemanager.dbstructure">Please refer to the database definition
                section.</link>)</para>
          </listitem>
        </itemizedlist> The FileManagerConfigurationController contains the following setting that
        is also from interest: <table>
          <title>FileManagerConfigurationController setting for the file action history feature</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Setting</entry>
                <entry>Description</entry>
                <entry>Default value</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>showFileHistoryMenuItem*</entry>
                <entry>Boolean. Flag used if the file action history tracking feature is activated
                  to allow the user to view the history of the files.</entry>
                <entry>true</entry>
              </row>
            </tbody>
          </tgroup>
        </table> If the preceding parameter is set to true, the user can open an history viewer by
        clicking on the following context menu item:<mediaobject>
          <imageobject><imagedata fileref="images/FileManager/fileactionhistorymenuitem.png"
          /></imageobject>
        </mediaobject></para>
      <para>
        <mediaobject>
          <imageobject><imagedata fileref="images/FileManager/historyViewer.png"/></imageobject>
        </mediaobject>
      </para>
      <para>Has shown in the previous picture, some tracked actions give some complementary
        information concerning the place where a file was copied or the new and old names in a
        rename operation.</para>
    </sect2>
    <sect2 xml:id="ivy.addons.filemanager.dbstructure">
      <title>The database definition</title>
      <para>The DDL for MS SQL, MySQL, PostGreSQL and Oracle has been included into the IvyAddons
        cms under: /ch/ivyteam/ivy/addons/filemanager/techData/createTablesDDL.
              <inlinemediaobject><imageobject><imagedata fileref="images/FileManager/DDLinCMS.png"
          /></imageobject></inlinemediaobject></para>
      <para><emphasis role="bold">The uploadedFiles Table.</emphasis> is historically the first and
        only needed table if you use the file manager with the file system and without file content
        database storage, security, or versioning.</para>
      <ns:warning>
        <para>If you run your database engine on a case sensitive system, please make sure that the
          column names in the uploadedfiles table are written in camel case (first letter of each
          word in uppercase, ex: FileName), as it is shown on the picture above. In early versions
          of the FileManager the recommended case was the uppercase for the whole names. If you use
          a table from an early version on such a case sensitive system, please rename your table's
          column names with the right camel case. If you run your server on a case insensitive
          system you don't have to worry about that point. All the other tables are newer and do not
          need any camel case.</para>
      </ns:warning>
      <literallayout>
   </literallayout>
      <para>Here is the representation of the tables relationships within a MySQL database server:
              <inlinemediaobject><imageobject><imagedata fileref="images/FileManager/database.png"
          /></imageobject></inlinemediaobject>
      </para>
    </sect2>
    <sect2 xml:id="ivy.addons.filemanager.methods">
      <title>Important methods</title>
      <para>In this section we won't have a look at all the filemanger's methods. please refer to
        the Ivy Interface documentation for that purpose.</para>
      <table>
        <title><code>FileManager Start methods</code> using an Ivy database configuration</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Method name</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><ns:code>setServerPath(String _newServerPath)</ns:code></entry>
              <entry>Set the server path. Use it if you want to reset the RD with a new Path on the
                server. The RDTree and the documentsList will to be rebuilt. The serverPath is the
                root directory that contains all the directories that can be selected. The user
                cannot navigate outside the serverPath.</entry>
            </row>
            <row>
              <entry><ns:code>refresh</ns:code></entry>
              <entry>It refreshes all the directories and reselect the root directory.</entry>
            </row>
            <row>
              <entry><ns:code>setIsRecursive(boolean _isRecursive)</ns:code></entry>
              <entry>Set how the files are searched in the Db and the FileSystem. If true the files
                are searched recursively under the selected directory. If false, just the files
                directly under the directory are shown.</entry>
            </row>
            <row>
              <entry><ns:code>editFile(java.io.File _fileToEdit)</ns:code></entry>
              <entry>Tries to open a selected file in edit mode. If the file is locked, the user
                will be informed that the File is going to be open in "Read only" modus. Read only
                doesn't mean, that the user cannot edit and save the file on his computer, but that
                the changes are not going to be uploaded on the server. If the File cannot be edited
                on the User's computer (like a PDF if no PDF Editor is installed), the file will be
                open in read only modus. </entry>
            </row>
            <row>
              <entry><ns:code>addDocuments(List&lt;DocumentOnServer>) </ns:code></entry>
              <entry>Add a list of documents into the Db and into the documents table list. It
                doesn't check if the files are really presents on the server. This check is
                performed with the next refresh action. </entry>
            </row>
            <row>
              <entry><ns:code>addFiles(List&lt;java.io.File>) </ns:code></entry>
              <entry>Add a list of Files into the Db and into the documents table list. It doesn't
                check if the files are really presents on the server. This check is performed with
                the next refresh action.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 xml:id="ivy.addons.filemanager.demo">
      <title>The Filemanager Demo</title>
      <para>A demo has been included in the IvyDemo project that comes with the Ivy Designer. This
        demo allows testing the main features of the FileManager (File storage on the database,
        Security and so on...). <mediaobject>
          <imageobject><imagedata fileref="images/FileManager/demo.png"/></imageobject>
        </mediaobject></para>
    </sect2>
    <sect2 xml:id="ivy.addons.filemanager.miscellaneous">
      <title>Other Informations on the FileManager RDC</title>
      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">The first thing to keep in mind is that when a user is editing
              a File, nobody else can edit it at the mean time.</emphasis> To unlock the file after
            edition the user has to unlock it manually with the <ns:emphasis>"unlock"
            button</ns:emphasis>:</para>
          <para><inlinemediaobject><imageobject><imagedata fileref="images/FileManager/unlock.png"
              /></imageobject></inlinemediaobject></para>
          <para>After unlocking the file, if the file is still opened at client side, the future
            changes are not going to be uploaded and saved on the server.</para>
          <para>To avoid keeping the lock on files after closing the application, the FileManager
            unlocks automatically the edited files from the user when it is closed. </para>
          <ns:warning>
            <para>If the application crashes for some reasons, the FileManager cannot unlock the
              Files. The only way to unlock them is that the user reopens the application and
              unlocks the edited files properly.</para>
          </ns:warning>
        </listitem>
        <listitem>
          <para>An another interesting capabillity is the <ns:emphasis><emphasis role="bold">Drag
                and Drop</emphasis></ns:emphasis> from Files from one Folder to another one and from
            the client file system into the FileManager.</para>
          <para>Drag one or more files from the files table an drop them on the destination
            directory: </para>
          <para><inlinemediaobject><imageobject><imagedata fileref="images/FileManager/FilesDnD.png"
                /></imageobject></inlinemediaobject></para>
          <para>Drag one or more files from the client file system: </para>
          <para><inlinemediaobject><imageobject><imagedata
                  fileref="images/FileManager/FilesDnDFromOS01.png"
            /></imageobject></inlinemediaobject></para>
          <para>The files are automatically uploaded: </para>
          <para><inlinemediaobject><imageobject><imagedata
                  fileref="images/FileManager/FilesDnDFromOS02.png"
            /></imageobject></inlinemediaobject></para>
          <para> There is for the moment no possibility to drag and drop files <emphasis role="bold"
              >to</emphasis> the client file system.</para>
        </listitem>
        <listitem>
          <para>The user can change the way the files are listed with the following button:</para>
          <para><inlinemediaobject><imageobject><imagedata fileref="images/FileManager/switch.png"
              /></imageobject></inlinemediaobject></para>
          <para>Using this button the user can list <emphasis role="bold">ALL</emphasis> the files
            contained into the selected directory and its subdirectories, or just the files
            contained directly under the selected directory (default behavior).</para>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>
  <sect1 xml:id="ivy.addons.filemanager.otherRDCs">
    <title>Other Framework Dialogs</title>
    <para>Beside the FileManager Rich Dialog you will find a collection of other rich dialogs that
      can be usefull in your applications. This documentation doesn't describes those rich dialogs
      in details. We just provide a short overview of them. Please read their Ivy Interfaces'
      documentation for more informations. </para>
    <para>Those Rich dialogs can be devided in two groups:<itemizedlist>
        <listitem>
          <para>The first Group contains two Rich Dialogs responsible for the Actions upon the
            Files. The major Rich Dialog in this Group is the
            <ns:emphasis>DesktopHandler</ns:emphasis>. This RDC is used as interface between the
            visual rich dialogs and the Java Classes developed to be able to perform actions on the
            files. This Rich Dialog was named "DesktopHandler" because it allows executing the
            methods contained in the <ns:code>java.awt.Desktop</ns:code> java Class. This
            DesktopHandler contains the other invisible Rich Dialog of this collection: the
              <ns:emphasis>FileEditorChecker</ns:emphasis>. This Rich Dialog is responsible for the
            persistency of the changes in a File edition. There should be no reason to have to
            implement directly this last rich dialog into your applications.</para>
        </listitem>
        <listitem>
          <para>The Second Group contains 7 Rich Dialogs other than the FileManager. They all
            supports now the File stored as BLOB in a database feature, if it applies. To activate
            this feature you have to start them with a ConfigurationController as specified in their interface.<ns:orderedlist>
              <listitem>
                <para>The <ns:emphasis>FileActionOptionPane</ns:emphasis>: it should be used as
                  Synchronous "popup" Window to perform an action (edit, print, download) on a given
                  File. It contains a DesktopHandler to be able to edit or print the File.</para>
              </listitem>
              <listitem>
                <para>The <ns:emphasis>SimpleFileActionChooserPane</ns:emphasis>: this Rich Dialog
                  doesn't contain a DesktopHandler. He cannot perform the edit or print actions from
                  itself. With this Rich Dialog you just choose upon "edit" or "print". It returns
                  "edit" if the user presses on the "Edit" button or "print" if the user presses on
                  the "Print" one. Else it returns "cancel". The Rich Dialog that calls this
                  SimpleFileActionChooserPane should then contains a DesktopHandler to perform the
                  choosed action.</para>
              </listitem>
              <listitem>
                <para>The <ns:emphasis>FileListChooserPane</ns:emphasis> is just composed by a
                  ComboBox. It should be inserted into a parent Rich Dialog. It is started with a
                  server folder path and lists all the Files contained into this folder. It
                  communicates with its parent Rich Dialog through a fired Event
                  fileSelectionChanged@SUBSCRIBERS whenever the selection was changed. The object
                  sent by this event is a DocumentOnServer.
                  (ch.ivyteam.ivy.addons.filemanager.DocumentOnServer dataclass) </para>
              </listitem>
              <listitem>
                <para>The <ns:emphasis>SimpleFileChooserDialog</ns:emphasis>: it contains a
                  FileListChooserPane and returns the selected java.io.File. It contains also a
                  DesktopHandler to be able to open the selected File. The user can then preview the
                  File that he is about to select.</para>
              </listitem>
              <listitem>
                <para>The <ns:emphasis>FileNameDialog</ns:emphasis> allows giving a Filename and
                  optionally to choose an extension and a future place to store a created File on
                  the server. This can be usefull in processes that create files and where the user
                  should choose the name of the created file.</para>
              </listitem>
              <listitem>
                <para>The <ns:emphasis>FileUploadPreparer</ns:emphasis>: in some processes a user
                  has to choose some Files to upload on the server at a time when the place where to
                  store the File is not known. With the FileUploadPreparer you can then select the
                  Files to upload, and then upload them later by calling its
                    <ns:code>uploadPreparedFiles</ns:code> method.</para>
              </listitem>
              <listitem>
                <para>The <ns:emphasis>FileListTable</ns:emphasis>: This RDC is like a very
                  simplified FileManager in the form of a RTable. It displays files contained into a
                  folder on the File Server. The user can edit or delete the displayed files. He can
                  also be used to upload some files. This RDC supports the files drag and drop from
                  the client file system.</para>
              </listitem>
            </ns:orderedlist></para>
        </listitem>
      </itemizedlist></para>
  </sect1>
</chapter>
