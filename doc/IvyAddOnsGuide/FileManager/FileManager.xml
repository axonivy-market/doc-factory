<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="ivy.addons.filemanager" xmlns="http://docbook.org/ns/docbook"
  xmlns:ns6="http://www.w3.org/1999/xlink" xmlns:ns5="http://www.w3.org/1998/Math/MathML"
  xmlns:ns4="http://www.w3.org/2000/svg" xmlns:ns3="http://www.w3.org/1999/xhtml"
  xmlns:ns="http://docbook.org/ns/docbook">
  <title>File Management System</title>
  <sect1 xml:id="ivy.addons.filemanager.introduction">
    <title>Introduction</title>
    <para>The goal of this document is to provide a small description of the file management system
      that has been developed for our Ivy RIAs applications. This file management system allows
      sharing, editing, versioning ... files in the Ivy RIA Applications.</para>
  </sect1>
  <sect1 xml:id="ivy.addons.filemanager.overview">
    <title>File management system overview</title>
    <para>The file management system is a set of Java Classes, Ivy Data Classes and Rich Dialogs
      that interoperates to be able to perform actions on files located on a Server File System or
      in a database just as they were located on the user's computer. You will find all those rich
      dialogs under <ns:code>ch.ivyteam.ivy.ivyaddons.filemanager</ns:code>. </para>
    <ns:warning>
      <para> The File Management System needs Java 6 at client side as a prerequisite. </para>
    </ns:warning>
    <para>The Users are then going to share the same files among an application. They will be able
      to edit, print, copy, zip or download those files. They will also be able to upload some Files
      from their computer to the server.</para>
    <para>The file management system doesn't work with Ivy File Objects. It works with java.io.File
      objects and moreover with
      <ns:code>ch.ivyteam.ivy.addons.filemanager.DocumentOnServer</ns:code> Objects. A
      DocumentOnServer is just a DataClass representing a java.io.File within the file management
      system and contains some informations like the File size, a short description, the date and
      time of creation and last modification or if it is already edited (locked) by someone.</para>
  </sect1>
  <sect1 xml:id="ivy.addons.filemanager.thefilemanagerRDC">
    <title>The FileManager RDC</title>
    <para>The FileManager Rich Dialog is the most important Rich Dialog of the file management
      system. </para>
    <para>It is visually composed by two main areas: a menu at the top and a split pane at the
      bottom. The split pane is divided in two regions: the folder explorer (RTree) and a RTable
      that lists the files contained into the selected folder. The top level Folder is given in the
      start method of the Filemanager Rich Dialog. The user cannot see the files and directories
      over this directory. The table displays some informations about the files: the name, the size,
      the Ivy User who created the File (by upload or by copy), the date and time of creation). It
      shows also in a tool tip the Ivy User who has last modified the file. It also shows a little
      Lock as icon if the file is currently edited, with the Ivy User name who is working with the
      file. If the user opens a file that is already edited by a third person, his changes are not
      going to be kept.</para>
    <mediaobject>
      <imageobject><imagedata fileref="images/FileManager/FileManager01.png"/></imageobject>
    </mediaobject>
    <para>All those files' informations are stored in a database.</para>
    <sect2 xml:id="ivy.addons.filemanager.initialization">
      <title>FileManager RDC Initialization</title>
      <para>This section describes how to start and use the FileManager. </para>
      <ns:warning>
        <para> The ivy users must have at least the two following rights:
            <ns:emphasis>ExternalDatabaseConfigurationReadMaxConnections</ns:emphasis> and
            <ns:emphasis>ExternalDatabaseConfigurationReadDatabaseConnectionConfiguration</ns:emphasis></para>
      </ns:warning>
      <para>There are two major informations to provide the FileManager: the <ns:emphasis>server
          path</ns:emphasis> representing the top directory that will be displayed, and the
          <ns:emphasis>database informations</ns:emphasis> to be able to store the files
        informations.</para>
      <para>These parameters can be given to the file manager through start methods or with the use
        of global variables. You will find these indications in next two sub paragraphs.</para>
      <sect3>
        <title>The Server path</title>
        <para>The server path is provided as parameter in the start methods of the RDC. This
          parameter can be an empty String. In such a case nothing is going to be displayed and the
          user will not be able to do anything. You can set the server Path dynamically at a delayed
          time with the <ns:code>setServerPath(String _serverPath)</ns:code> method. </para>
        <para>If you provide a path like "Test/dir1/", the directories and theirs files are going to
          be located at the root of the Ivy Server installation directory. If the path is like
          "/test/dir1/...", the directories and theirs files are going to be located at the root of
          the drive. You can also provide a path like "C:/test/...".</para>
        <para>You can connect to a file share server path with for example
            <ns:emphasis>"//ServerShareName/dir1/"</ns:emphasis>. In such a case the file sharing
          must be configured so that the Ivy Server User can connect to it. </para>
      </sect3>
      <sect3>
        <title>The database settings</title>
        <sect4>
          <title>If the files are stored on a server File System...</title>
          <para>You can use the IvySystem DB to store the informations about the files, or you can
            use an external Database System.</para>
          <para>If your table is located on the Ivy System Database you can start the FileManager
            with its <ns:code>startWithServerPathAndUseIvySystemDB(String _serverPath)</ns:code>
            start method. It is the easiest way to use the FileManager. You can also set the
              <ns:code>xivy_addons_fileManager_activateUseOfIvySystemDatabase global variable to
              "1".</ns:code></para>
          <para>If you use an external database you have to provide more informations:<itemizedlist>
              <listitem>
                <para>First you have to configure an Ivy Database Configuration in your project (see
                  the Ivy Documentation related to this point).</para>
              </listitem>
              <listitem>
                <para>You have to create the "UploadedFiles" Table. Please refer to the database
                  definition section.</para>
              </listitem>
              <listitem>
                <para>Then use one of the following start methods:</para>
              </listitem>
            </itemizedlist></para>
          <table>
            <title><code>FileManager Start methods</code> using an Ivy database configuration</title>
            <tgroup cols="3">
              <thead>
                <row>
                  <entry>Start method name</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><ns:code>startWithServerPathAndIvyDbConnectionNameAndDbTableName</ns:code></entry>
                  <entry>Starts with serverPath / IvyDBConnectionName / DBTableName. The server path
                    is the root directory in the server file system where the documents are going to
                    be uploaded and found. The IvyDBConnectionName is the name of the Ivy Database
                    Connection configuration, used to store the files informations. (Per default
                    "FileManager"). The DBTableName is the Table name where the files informations
                    are going to be stored. Per Default "uploadedfiles"</entry>
                </row>
                <row>
                  <entry><ns:code>startWithServerPathAndIvyDbConnectionNameAndDbTableNameAndDBSchemaName</ns:code></entry>
                  <entry>If you use a PostGreSQL database, you can provide a schema name also. If no
                    Schema is provided, the default used will be "public".</entry>
                </row>
                <row>
                  <entry><ns:code>startWithServerPath</ns:code></entry>
                  <entry>This start method only takes the serverPath as Parameter. In this case you
                    have to obligatory provide a database configuration named "FileManager" and your
                    table has to be named "uploadedfiles".</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <ns:warning>
            <para>For the moment only three kinds of external databases were tested: MS SQL, MySQL
              and PostGRESQL.</para>
          </ns:warning>
        </sect4>
        <sect4>
          <title> The files' content is stored in a database as BLOB or VARBINARY field (depending
            on your database vendor) </title>
          <para><emphasis role="bold">This feature is not supported within the Ivy System
            Database.</emphasis> You must store the files informations in an external database.</para>
          <para> Instead of having all the files and directory structure stored in a file system,
            you can store all of these informations in a database. For that you will need 3 tables: <itemizedlist>
              <listitem>
                <para> the files meta informations table (per default uploadedfiles), </para>
              </listitem>
              <listitem>
                <para> the file content table (per default filemanagercontent),</para>
              </listitem>
              <listitem>
                <para> the directory structure table (per default filemanagerdirectory),</para>
              </listitem>
            </itemizedlist></para>
          <para>Please refer to the database definition section.</para>
          <para>To be able to start the filemanager with the filecontent stored in the database, you
            have to use the start method corresponding to the following parameters, or you can set
            the <ns:code>xivy_addons_fileManager_activateFileContentInDatabase global variable to
              "1".</ns:code>
          </para>
          <table>
            <title><code>FileManager Start method</code> enabling the file storage in database</title>
            <tgroup cols="3">
              <thead>
                <row>
                  <entry>Parameter name</entry>
                  <entry>Parameter type</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>serverPath</entry>
                  <entry>String</entry>
                  <entry>The entry Path of the FileManager</entry>
                </row>
                <row>
                  <entry>useIvySystemDB</entry>
                  <entry>Boolean</entry>
                  <entry>If true, the files informations are going to be stored in the Ivy System
                    Database. In such a case the file content storage in the database is not
                    supported. If false you will use a separate external database (see
                    ivyDBConnectionName, schemaName, FileTableName, DirTableName parameters)</entry>
                </row>
                <row>
                  <entry>ivyDBConnectionName</entry>
                  <entry>String</entry>
                  <entry>If use of external DB, this is the user friendly Ivy connection to the
                  DB.</entry>
                </row>
                <row>
                  <entry>schemaName</entry>
                  <entry>String</entry>
                  <entry>If use of external DB with engine that supports Schemas like
                  PostGreSQL</entry>
                </row>
                <row>
                  <entry>fileTableName</entry>
                  <entry>String</entry>
                  <entry>The name of the table that stores the informations relative to the
                  files</entry>
                </row>
                <row>
                  <entry>fileContentTableName</entry>
                  <entry>String</entry>
                  <entry>The name of the table that stores the file content</entry>
                </row>
                <row>
                  <entry>dirTableName</entry>
                  <entry>String</entry>
                  <entry>The name of the table that stores the informations relative to the
                    directories (only necessary if the files content is stored in the fileTable (see
                    storeFilesInDB parameter)</entry>
                </row>
                <row>
                  <entry>storeFilesInDB</entry>
                  <entry>Boolean</entry>
                  <entry>If true, the file content will be also stored in the fileTable. If the
                    "useIvySystemDB" parameter is true, the "storeFilesInDB will always be
                  false."</entry>
                </row>
                <row>
                  <entry>activateSecurity</entry>
                  <entry>Boolean</entry>
                  <entry>If true, the security on the directories will be taken (See the section
                    about this feature to get mor informations). The security Informations are
                    stored in the dirTable. This only works for the moment with storeFilesInDB
                    parameter to true. Parameter storeFilesInDB to false implies this parameter to
                    false also.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </sect4>
      </sect3>
    </sect2>
    <sect2 xml:id="ivy.addons.filemanager.security">
      <title>Security manager</title>
      <para> If the files content are stored in the database, you can activate the security embedded
        in the filemanager. For this purpose you have to use the start method described in the
        precedent paragraph, or you can set the <ns:code>xivy_addons_fileManager_activateSecurity
          global variable to "1". </ns:code></para>
      <para> The security is based on the Ivy Roles. The filemanager security administrator has all
        the roles and can manage the security of the other roles. This role is set in the following
        global variable: </para>
      <mediaobject>
        <imageobject><imagedata fileref="images/FileManager/globalVariable_admin.png"
        /></imageobject>
      </mediaobject>
      <para> If the current Ivy user has the administrator role, he will see the following button
        above the directories Tree: </para>
      <mediaobject>
        <imageobject><imagedata fileref="images/FileManager/adminButton.png"/></imageobject>
      </mediaobject>
      <para> The security manager appears as described on the following picture: </para>
      <mediaobject>
        <imageobject><imagedata fileref="images/FileManager/adminPanel.png"/></imageobject>
      </mediaobject>
      <para> The following picture shows some of the possible results of the security settings: </para>
      <mediaobject>
        <imageobject><imagedata fileref="images/FileManager/securityResult.png"/></imageobject>
      </mediaobject>
      <para>The security is controlled by a securityController java Object. This Controller can be
        obtained with the new FileManager <code>getFileManagerSecurityController()</code> method.
        The returned Object is a
          <code>ch.ivyteam.ivy.addons.filemanager.database.security.AbstractDirectorySecurityController</code>.
        Its API is public and well documented. </para>
      <important>
        <para>New created directories will inherit their parent's rights automatically.</para>
      </important>
    </sect2>
    <sect2 xml:id="ivy.addons.filemanager.versioning">
      <title>File Versioning</title>
      <para>A new feature has been also added to the filemanager: the possibility to create files
        versions. A prerequesite is that the files content is stored in the database.</para>
      <para>To be able to activate this feature you have to <ns:code>set the
          xivy_addons_fileManager_activateFileVersioning to "1".</ns:code></para>
      <para> For this feature you will need a more complete database structure (Please refer to the
        database definition section.): <itemizedlist>
          <listitem>
            <para> The files meta informations table (per default uploadedfiles),<emphasis
                role="bold"> with a new field (versionnumber (int))</emphasis></para>
          </listitem>
          <listitem>
            <para> The file content table (per default filemanagercontent),</para>
          </listitem>
          <listitem>
            <para> The directory structure table (per default filemanagerdirectory),</para>
          </listitem>
          <listitem>
            <para> The file versions table (per default file_versions),</para>
          </listitem>
          <listitem>
            <para> The file versions content table (per default file_version_content),</para>
          </listitem>
        </itemizedlist></para>
      <para>
        <literallayout>
        If you start the fileManager and activate the versioning feature, a new information will be shown:
        <inlinemediaobject><imageobject><imagedata fileref="images/FileManager/fileversioning1.png"/></imageobject></inlinemediaobject>
        
        With the context menu you can create a new version of the selected file or you can open the
        existing versions.
        <inlinemediaobject><imageobject><imagedata fileref="images/FileManager/fileversioning2.png"/></imageobject></inlinemediaobject>
        
        The old files versions can be opened but you cannot edit their content in the file manager. 
        <inlinemediaobject><imageobject><imagedata fileref="images/FileManager/fileversioning3.png"/></imageobject></inlinemediaobject>
      </literallayout>
      </para>
    </sect2>
    <sect2 xml:id="ivy.addons.filemanager.dbstructure">
      <title>The database definition</title>
      <para>Here are the tables SQL CREATE scripts for creating the file manager database tables.</para>
      <para><emphasis role="bold">The uploadedFiles Table.</emphasis> This is historically the first
        and only needed table if you use the file manager with the file system and without file
        content database storage, security, or versioning.</para>
      <ns:warning>
        <para>If you run your database engine on a case sensitive system, please make sure that the
          column names in this table are written in camel case (first letter of each word in
          uppercase, ex: FileName), as it is shown here. In older versions of the FileManager the
          recommended case was the uppercase for the whole names. If you use a table from a previous
          version on such a case sensitive system, please rename your table's column names with the
          right camel case. If you run your server on a case insensitive system you don't have to
          worry about that point.</para>
      </ns:warning>
      <literallayout>
        First for an MS SQL Engine:
      <ns:code>
          CREATE TABLE uploadedfiles
          (
          FileId             INT IDENTITY NOT NULL,
          FileName           VARCHAR (255) NULL,
          FilePath           VARCHAR (750) NULL,
          CreationUserId     VARCHAR (64) NULL,
          CreationDate       VARCHAR (10) NULL,
          CreationTime       VARCHAR (8) NULL,
          FileSize           VARCHAR (20) NULL,
          Locked             TINYINT NULL,
          LockingUserId      VARCHAR (64) NULL,
          ModificationUserId VARCHAR (64) NULL,
          ModificationDate   VARCHAR (10) NULL,
          ModificationTime   VARCHAR (8) NULL,
          Description        VARCHAR (1024) NULL,
          versionnumber      INT NULL,  //COMMENT this field is only needed if you start the fileManager with the versioning.
          PRIMARY KEY (FileId)
          )
      </ns:code>
        And for an MYSQL DB Engine:
        <ns:code>
          CREATE TABLE IF NOT EXISTS `uploadedfiles` (
          `FileId` bigint(20) NOT NULL AUTO_INCREMENT,
          `FileName` varchar(255) DEFAULT NULL,
          `FilePath` varchar(750) DEFAULT NULL,
          `CreationUserId` varchar(64) DEFAULT NULL,
          `CreationDate` varchar(10) DEFAULT NULL,
          `CreationTime` varchar(8) DEFAULT NULL,
          `FileSize` varchar(20) DEFAULT NULL,
          `Locked` tinyint(1) DEFAULT NULL,
          `LockingUserId` varchar(64) DEFAULT NULL,
          `ModificationUserId` varchar(64) DEFAULT NULL,
          `ModificationDate` varchar(10) DEFAULT NULL,
          `ModificationTime` varchar(8) DEFAULT NULL,
          `Description` varchar(1024) DEFAULT NULL,
          `versionnumber` int(11) DEFAULT '1', //COMMENT this field is only needed if you start the fileManager with the versioning.
          PRIMARY KEY (`fileid`) 
          ) ENGINE=InnoDB AUTO_INCREMENT=1 ;
        </ns:code>
      </literallayout>
      <para><emphasis role="bold">The directories and file content tables.</emphasis> Both are
        necessary if you store the file content in the database.</para>
      <literallayout>
        First for an MS SQL Engine:
        <ns:code>
          CREATE TABLE directories
          (
          id                   INT IDENTITY NOT NULL,
          dir_name             VARCHAR (255) NOT NULL,
          dir_path             VARCHAR (750) UNIQUE NOT NULL,
          creation_user_id     VARCHAR (200) NULL,
          creation_date        DATE NULL,
          creation_time        TIME NULL,
          modification_user_id VARCHAR (200) NULL,
          modification_date    DATE NULL,
          modification_time    TIME NULL,
          is_protected         BIT DEFAULT ((0)) NOT NULL,
          cmdr                 VARCHAR (2048) NULL,
          cod                  VARCHAR (2048) NULL,
          cud                  VARCHAR (2048) NULL,
          cdd                  VARCHAR (2048) NULL,
          cwf                  VARCHAR (2048) NULL,
          cdf                  VARCHAR (2048) NULL,
          PRIMARY KEY (id)
          )
          
          CREATE TABLE filecontent
          (
          id           INT IDENTITY NOT NULL,
          file_id      INT UNIQUE NOT NULL,
          file_content VARBINARY (max) NULL,
          PRIMARY KEY (id)
          )
        </ns:code>
        And for an MYSQL DB Engine:
        <ns:code>
          CREATE TABLE IF NOT EXISTS `directories` (
          `id` bigint(20) NOT NULL AUTO_INCREMENT,
          `dir_name` varchar(255) NOT NULL,
          `dir_path` varchar(750) NOT NULL,
          `creation_user_id` varchar(200) DEFAULT NULL,
          `creation_date` date DEFAULT NULL,
          `creation_time` time DEFAULT NULL,
          `modification_user_id` varchar(200) DEFAULT NULL,
          `modification_date` date DEFAULT NULL,
          `modification_time` time DEFAULT NULL,
          `is_protected` tinyint(1) NOT NULL DEFAULT '0',
          `cmdr` varchar(2048) DEFAULT NULL,
          `cod` varchar(2048) DEFAULT NULL,
          `cud` varchar(2048) DEFAULT NULL,
          `cdd` varchar(2048) DEFAULT NULL,
          `cwf` varchar(2048) DEFAULT NULL,
          `cdf` varchar(2048) DEFAULT NULL,
          PRIMARY KEY (`id`),
          UNIQUE KEY `dir_path` (`dir_path`)
          ) ENGINE=InnoDB AUTO_INCREMENT=1 ;
          
          CREATE TABLE IF NOT EXISTS `filecontent` (
          `id` bigint(20) NOT NULL AUTO_INCREMENT,
          `file_id` bigint(20) NOT NULL,
          `file_content` longblob,
          PRIMARY KEY (`id`)
          ) ENGINE=InnoDB AUTO_INCREMENT=1 ;
        </ns:code>
      </literallayout>
      <para><emphasis role="bold">The file versioning tables.</emphasis> Both are necessary if you
        use the file versioning feature.</para>
      <literallayout>
        First for an MS SQL Engine:
        <ns:code>
          CREATE TABLE file_versions
          (
          versionid      BIGINT IDENTITY NOT NULL,
          file_id        INT NOT NULL,
          version_number INT NULL,
          fvc_id         INT NULL,
          file_name      NVARCHAR (255) NOT NULL,
          cdate          DATE NULL,
          ctime          TIME NULL,
          cuser          NVARCHAR (255) NULL,
          PRIMARY KEY (versionid)
          )
          
          CREATE TABLE file_version_content
          (
          fvcid      BIGINT IDENTITY NOT NULL,
          version_id BIGINT NULL,
          content    VARBINARY (max) NULL,
          PRIMARY KEY (fvcid)
          )
        </ns:code>
        And for an MYSQL DB Engine:
        <ns:code>
          CREATE TABLE IF NOT EXISTS `file_versions` (
          `versionid` bigint(20) NOT NULL AUTO_INCREMENT,
          `file_id` bigint(20) NOT NULL,
          `version_number` int(11) NOT NULL,
          `fvc_id` bigint(20) DEFAULT NULL,
          `file_name` varchar(255) NOT NULL,
          `cdate` date DEFAULT NULL,
          `ctime` time DEFAULT NULL,
          `cuser` varchar(255) DEFAULT NULL,
          PRIMARY KEY (`versionid`)
          ) ENGINE=InnoDB AUTO_INCREMENT=1 ;
          
          CREATE TABLE IF NOT EXISTS `file_version_content` (
          `fvcid` bigint(20) NOT NULL AUTO_INCREMENT,
          `version_id` bigint(20) NOT NULL,
          `content` longblob,
          PRIMARY KEY (`fvcid`)
          ) ENGINE=InnoDB AUTO_INCREMENT=1 ;
        </ns:code>
      </literallayout>
      <para>Here is the representation of the tables relationships within a My SQL database server:
              <inlinemediaobject><imageobject><imagedata fileref="images/FileManager/database.png"
          /></imageobject></inlinemediaobject>
      </para>
    </sect2>
    <sect2 xml:id="ivy.addons.filemanager.methods">
      <title>Important methods</title>
      <para>In this section we won't have a look at all the filemanger's methods. please refer to
        the Ivy Interface documentation for that purpose.</para>
      <table>
        <title><code>FileManager Start methods</code> using an Ivy database configuration</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Method name</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><ns:code>setServerPath(String _newServerPath)</ns:code></entry>
              <entry>Set the server path. Use it if you want to reset the RD with a new Path on the
                server. The RDTree and the documentsList will to be rebuilt. The serverPath is the
                root directory that contains all the directories that can be selected. The user
                cannot navigate outside the serverPath.</entry>
            </row>
            <row>
              <entry><ns:code>refresh</ns:code></entry>
              <entry>It refreshes all the directories and reselect the root directory.</entry>
            </row>
            <row>
              <entry><ns:code>setIsRecursive(boolean _isRecursive)</ns:code></entry>
              <entry>Set how the files are searched in the Db and the FileSystem. If true the files
                are searched recursively under the selected directory. If false, just the files
                directly under the directory are shown.</entry>
            </row>
            <row>
              <entry><ns:code>editFile(java.io.File _fileToEdit)</ns:code></entry>
              <entry>Tries to open a selected file in edit mode. If the file is locked, the user
                will be informed that the File is going to be open in "Read only" modus. Read only
                doesn't mean, that the user cannot edit and save the file on his computer, but that
                the changes are not going to be uploaded on the server. If the File cannot be edited
                on the User's computer (like a PDF if no PDF Editor is installed), the file will be
                open in read only modus. </entry>
            </row>
            <row>
              <entry><ns:code>addDocuments(List&lt;DocumentOnServer>) </ns:code></entry>
              <entry>Add a list of documents into the Db and into the documents table list. It
                doesn't check if the files are really presents on the server. This check is
                performed with the next refresh action. </entry>
            </row>
            <row>
              <entry><ns:code>addFiles(List&lt;java.io.File>) </ns:code></entry>
              <entry>Add a list of Files into the Db and into the documents table list. It doesn't
                check if the files are really presents on the server. This check is performed with
                the next refresh action.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect2>
    <sect2 xml:id="ivy.addons.filemanager.miscellaneous">
      <title>Other Informations on the FileManager RDC</title>
      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">The first thing to keep in mind is that when a user is editing
              a File, nobody else can edit it at the mean time.</emphasis> To unlock the file after
            edition the user has to unlock it manually with the <ns:emphasis>"unlock"
            button</ns:emphasis>:</para>
          <para><inlinemediaobject><imageobject><imagedata fileref="images/FileManager/unlock.png"
              /></imageobject></inlinemediaobject></para>
          <para>After unlocking the file, if the file is still opened at client side, the future
            changes are not going to be uploaded and saved on the server.</para>
          <para>To avoid keeping the lock on files after closing the application, the FileManager
            unlocks automatically the edited files from the user when it is closed. </para>
          <ns:warning>
            <para>If the application crashes for some reasons, the FileManager cannot unlock the
              Files. The only way to unlock them is that the user reopens the application and
              unlocks the edited files properly.</para>
          </ns:warning>
        </listitem>
        <listitem>
          <para>An another interesting capabillity is the <ns:emphasis><emphasis role="bold">Drag
                and Drop</emphasis></ns:emphasis> from Files from one Folder to another one and from
            the client file system into the FileManager.</para>
          <para>Drag one or more files from the files table an drop them on the destination
            directory: </para>
          <para><inlinemediaobject><imageobject><imagedata fileref="images/FileManager/FilesDnD.png"
                /></imageobject></inlinemediaobject></para>
          <para>Drag one or more files from the client file system: </para>
          <para><inlinemediaobject><imageobject><imagedata
                  fileref="images/FileManager/FilesDnDFromOS01.png"
            /></imageobject></inlinemediaobject></para>
          <para>The files are automatically uploaded: </para>
          <para><inlinemediaobject><imageobject><imagedata
                  fileref="images/FileManager/FilesDnDFromOS02.png"
            /></imageobject></inlinemediaobject></para>
          <para> There is for the moment no possibility to drag and drop files <emphasis role="bold"
              >to</emphasis> the client file system.</para>
        </listitem>
        <listitem>
          <para>The user can change the way the files are listed with the following button:</para>
          <para><inlinemediaobject><imageobject><imagedata fileref="images/FileManager/switch.png"
              /></imageobject></inlinemediaobject></para>
          <para>Using this button the user can list <emphasis role="bold">ALL</emphasis> the files
            contained into the selected directory and its subdirectories, or just the files
            contained directly under the selected directory (default behavior).</para>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>
  <sect1 xml:id="ivy.addons.filemanager.otherRDCs">
    <title>Other Framework Dialogs</title>
    <para>Beside the FileManager Rich Dialog you will find a collection of other rich dialogs that
      can be usefull in your applications. This documentation doesn't describes those rich dialogs
      in details. We just provide a short overview of them. Please read their Ivy Interfaces'
      documentation for more informations. </para>
    <para>Those Rich dialogs can be devided in two groups:<itemizedlist>
        <listitem>
          <para>The first Group contains two Rich Dialogs responsible for the Actions upon the
            Files. The major Rich Dialog in this Group is the
            <ns:emphasis>DesktopHandler</ns:emphasis>. This RDC is used as interface between the
            visual rich dialogs and the Java Classes developed to be able to perform actions on the
            files. This Rich Dialog was named "DesktopHandler" because it allows executing the
            methods contained in the <ns:code>java.awt.Desktop</ns:code> java Class. This
            DesktopHandler contains the other invisible Rich Dialog of this collection: the
              <ns:emphasis>FileEditorChecker</ns:emphasis>. This Rich Dialog is responsible for the
            persistency of the changes in a File edition. There should be no reason to have to
            implement directly this last rich dialog into your applications.</para>
        </listitem>
        <listitem>
          <para>The Second Group contains 7 Rich Dialogs other than the FileManager.<ns:orderedlist>
              <listitem>
                <para>The <ns:emphasis>FileActionOptionPane</ns:emphasis>: it should be used as
                  Synchronous "popup" Window to perform an action (edit, print, download) on a given
                  File. It contains a DesktopHandler to be able to edit or print the File.</para>
              </listitem>
              <listitem>
                <para>The <ns:emphasis>SimpleFileActionChooserPane</ns:emphasis>: this Rich Dialog
                  doesn't contain a DesktopHandler. He cannot perform the edit or print actions from
                  itself. With this Rich Dialog you just choose upon "edit" or "print". It returns
                  "edit" if the user presses on the "Edit" button or "print" if the user presses on
                  the "Print" one. Else it returns "cancel". The Rich Dialog that calls this
                  SimpleFileActionChooserPane should then contains a DesktopHandler to perform the
                  choosed action.</para>
              </listitem>
              <listitem>
                <para>The <ns:emphasis>FileListChooserPane</ns:emphasis> is just composed by a
                  ComboBox. It should be inserted into a parent Rich Dialog. It is started with a
                  server folder path and lists all the Files contained into this folder. It
                  communicates with its parent Rich Dialog through a fired Event
                  fileSelectionChanged@SUBSCRIBERS whenever the selection was changed. The object
                  sent by this event is a DocumentOnServer.
                  (ch.ivyteam.ivy.addons.filemanager.DocumentOnServer dataclass) </para>
              </listitem>
              <listitem>
                <para>The <ns:emphasis>SimpleFileChooserDialog</ns:emphasis>: it contains a
                  FileListChooserPane and returns the selected java.io.File. It contains also a
                  DesktopHandler to be able to open the selected File. The user can then preview the
                  File that he is about to select.</para>
              </listitem>
              <listitem>
                <para>The <ns:emphasis>FileNameDialog</ns:emphasis> allows giving a Filename and
                  optionally to choose an extension and a future place to store a created File on
                  the server. This can be usefull in processes that create files and where the user
                  should choose the name of the created file.</para>
              </listitem>
              <listitem>
                <para>The <ns:emphasis>FileUploadPreparer</ns:emphasis>: in some processes a user
                  has to choose some Files to upload on the server at a time when the place where to
                  store the File is not known. With the FileUploadPreparer you can then select the
                  Files to upload, and then upload them later by calling its
                    <ns:code>uploadPreparedFiles</ns:code> method.</para>
              </listitem>
              <listitem>
                <para>The <ns:emphasis>FileListTable</ns:emphasis>: This RDC is like a very
                  simplified FileManager in the form of a RTable. It displays files contained into a
                  folder on the File Server. The user can edit or delete the displayed files. He can
                  also be used to upload some files. This RDC supports the files drag and drop from
                  the client file system.</para>
              </listitem>
            </ns:orderedlist></para>
        </listitem>
      </itemizedlist></para>
    <ns:warning>
      <para>These Richdialogs do not support the new features like storing the file content in the
        database, file versioning or the security. For the moment, only the FIleManager RDC support
        these features.</para>
    </ns:warning>
  </sect1>
</chapter>
