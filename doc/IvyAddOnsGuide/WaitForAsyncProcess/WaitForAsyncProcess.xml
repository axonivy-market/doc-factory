<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	xml:id="ivy.addons.process.async.WaitForAsyncProcess">
	<title>Waiting for an asynchronous process</title>
	<sect1 xml:id="ivy.addons.process.async.WaitForAsyncProcess.documentation">
		<title>WaitForAsyncProcess</title>
		<para>The intermediate event bean <emphasis role="bold"
				>ch.ivyteam.ivy.addons.process.async.WaitForAsyncProcess</emphasis> lets you wait in
			your main business process for 1-n asynchronous processes until all of them have
			finished and/or sent a signal that they have ended. </para>
		<para>For a quick demo checkout IvyDemos and see <emphasis role="bold"
				>Processes/WaitForAsyncProcessDemo/MainBusinessProcess</emphasis>
		</para>
		<sect2>
			<title>How to</title>
			<para>If you want to wait on the intermediate event until your asynchronous processes
				have ended, you need to do the following 4 steps: <itemizedlist>
					<listitem>
						<para>Generate an EventID</para>
					</listitem>
					<listitem>
						<para>Trigger and register your asynchronous process</para>
					</listitem>
					<listitem>
						<para>(Optional) Signal the end of the asynchronous process</para>
					</listitem>
					<listitem>
						<para>Wait on the intermediate event</para>
					</listitem>
				</itemizedlist></para>
			<sect3>
				<title>Generate an EventID</title>
				<para>The unique EventID is used to determine if all processes with the same EventID
					have ended. You can use <code>ivy.case.getIdentifier().toString()</code> or some
					other methods to generate a unique identifier. </para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/WaitForAsyncProcess/generateeventid.jpg"/>
						</imageobject>
					</mediaobject>
				</para>
			</sect3>
			<sect3>
				<title>Trigger and register your asynchronous process</title>
				<para>After you create the EventID you can trigger and register your processes.
					There must be at least one registered process. Otherwise the intermediate event
					bean will wait forever. </para>
				<para>Your asynchronous process start must be startable by a trigger and the
						<emphasis role="bold">Responsible Role</emphasis> for the trigger must be
					set to <emphasis role="bold">SYSTEM</emphasis>. </para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/WaitForAsyncProcess/processstart.jpg"/>
						</imageobject>
					</mediaobject>
				</para>
				<para>Now that you can start your process with a trigger, you can insert a trigger
					element in your main process and call your asynchronous process. In the output
					tab, you have to register the process.</para>
				<para><code>ch.ivyteam.ivy.addons.process.async.WaitForAsyncProcess.registerProcess(triggeredTask.getCase(),
						in.eventId)</code>
				</para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/WaitForAsyncProcess/registerprocess.jpg"/>
						</imageobject>
					</mediaobject>
				</para>
				<para>The <emphasis role="bold">registerProcess</emphasis> method returns the
					eventId that was passed as a parameter. This is for convenience so you can call
						<emphasis role="bold">registerProcess</emphasis> on your eventId property. </para>
				<para>You can repeat this step until all your asynchronous process are triggered.
				</para>
			</sect3>
			<sect3>
				<title>(Optional) Signal the end of the asynchronous process</title>
				<para>If you just want to execute an asynchronous process without sending any
					parameters back to the main process, you can skip this step. </para>
				<para>However, if you want to send process data back to your main process, you can
					do this by using the callable <emphasis role="bold">Functional
						Process/WaitForAsyncProcess/SignalEndOfAsyncProcess</emphasis> and the Java
					class <emphasis role="bold"
						>ch.ivyteam.ivy.addons.process.parameter.ProcessParameter</emphasis>. <itemizedlist>
						<listitem>
							<para>Create an attribute in the data class of your process of the type
									<emphasis role="bold"
									>ch.ivyteam.ivy.addons.process.parameter.ProcessParameter</emphasis></para>
						</listitem>
						<listitem>
							<para>In your process, put the values you want to send back into the
								ProcessParameter</para>
						</listitem>
						<listitem>
							<para>Call <emphasis role="bold">signalEnd</emphasis></para>
						</listitem>
					</itemizedlist></para>
				<para>ProcessParameter provides a Map like interface to store process data. It
					supports the basic Ivy Data types. </para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/WaitForAsyncProcess/processparameter.jpg"/>
						</imageobject>
					</mediaobject>
				</para>
				<tip>
					<para>List must be one of the putXXX data types!</para>
				</tip>
				<para>
				</para>
				<para>Here an example how you can put process data into the ProcessParameter: </para>
				<para><code>in.processParameter.putString("email", in.email)</code></para>
				<para><code>.putBoolean("email-created", true);</code>
				</para>
				<para>
				</para>
				<para>You can also put ProcessParameter objects into a ProcessParameter object in
					case you need to compose an object like structure.</para>
				<para><code>import ch.ivyteam.ivy.addons.process.parameter.ProcessParameter;</code></para>
				<para><code>ProcessParameter contact = new ProcessParameter();</code></para>
				<para><code>contact.putString("street", "Sukhumvit Soi 4");</code></para>
				<para><code>contact.putString("zip", "10110");</code></para>
				<para><code>// ... in.processParameter.putProcessParameter("contact", contact);
					</code>
				</para>
				<para>
				</para>
				<para>As an alternative you could separate the object path with dots. </para>
				<tip>
					<para>For convenience you can chain calls to putXXX. </para>
				</tip>
				<para><code>in.processParameter.putString("contact.street", "Sukhumvit Soi
					4")</code></para>
				<para><code>.putString("contact.zip", "10110"); </code>
				</para>
				<para>
				</para>
				<para>Now you are ready to send the parameters back to the main process. Use the
						<emphasis role="bold">SignalEndOfAsyncProcess</emphasis> callable to do
					this. </para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/WaitForAsyncProcess/signalend.jpg"/>
						</imageobject>
					</mediaobject>
				</para>
				<para>As you can see you have to pass 2 parameters: <emphasis role="bold"
						>parameterName</emphasis> and <emphasis role="bold">parameter</emphasis>
				</para>
				<para>As you will see later, <emphasis role="bold">parameterName</emphasis> is used
					as an access key on your intermediate event bean to retrieve the
					ProcessParameter from all the asynchronous processes that you triggered. Hence
					it has to be unique among the triggered processes. <emphasis role="bold"
						>parameter</emphasis> is the object you just filled with your process data. </para>
				<tip>
					<para>You could continue to do things/tasks in your asynchronous process after
						you sent the <emphasis role="bold">signalEnd</emphasis>. This is useful if
						you already have the data that you want to send back but still need to do
						other things. However, you can send the <emphasis role="bold"
						>signalEnd</emphasis> only once in your process. If you don't have to send
						back data, you can use <emphasis role="bold"
						>signalEndNoParameter</emphasis>. It works like <emphasis role="bold"
							>signalEnd</emphasis> but with no parameter. </para>
				</tip>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/WaitForAsyncProcess/signalendnoparameter.jpg"
							/>
						</imageobject>
					</mediaobject>
				</para>
			</sect3>
			<sect3>
				<title>Wait on the intermediate event</title>
				<para>Now you are ready to setup the intermediate event bean that waits for all your
					asynchronous processes. </para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/WaitForAsyncProcess/intermediateevent1.jpg"/>
						</imageobject>
					</mediaobject>
				</para>
				<para>Set the <emphasis role="bold">Java Class to execute</emphasis> to <emphasis
						role="bold"
					>ch.ivyteam.ivy.addons.process.async.WaitForAsyncProcess</emphasis> and set
						<emphasis role="bold">Event ID</emphasis> to the ID you generated. In the
					Editor tab you can set the polling time if you want. Note that this property can
					not be dynamic. You have to insert a number. </para>
				<para>
					<mediaobject>
						<imageobject>
							<imagedata fileref="images/WaitForAsyncProcess/intermediateevent2.jpg"/>
						</imageobject>
					</mediaobject>
				</para>
				<para>On the Output tab you can now get your ProcessParameter objects with the
					access key you defined in your asynchronous process. </para>
			</sect3>
			<sect3>
				<title>Why can't I use my own data classes?</title>
				<para>This should be considered a feature because it decouples the 2 processes (Main
					business process and asynchronous sub process) from each other. Consider the
					case where you have a main project that has a library project attached. If you
					now call a process in the library project that returns a data class type defined
					in it, you tie the main project to the library project. Now if you wish to
					create a new implementation of the library project (lets say Xpertline instead
					of SAP) you face the problem that you don't have the same data classes. You'd
					have to change the main project to support the new data class. </para>
				<para>On the other hand, now it exchanges the data in the ProcessParameter object.
					You only need to match the parameter names in order to exchange data. You don't
					have to relay on a particular data type from another project and visa versa.
				</para>
			</sect3>
		</sect2>
	</sect1>
</chapter>
