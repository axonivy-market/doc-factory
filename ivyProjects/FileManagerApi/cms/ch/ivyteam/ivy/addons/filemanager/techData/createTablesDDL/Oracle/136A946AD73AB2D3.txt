CREATE TABLE uploadedfiles
(
	FileId             number(19,0) NOT NULL,
	FileName           VARCHAR2 (255) NULL,
	FilePath           VARCHAR2 (750) NULL,
	CreationUserId     VARCHAR2 (64) NULL,
	CreationDate       VARCHAR2 (10) NULL,
	CreationTime       VARCHAR2 (8) NULL,
	FileSize           VARCHAR2 (20) NULL,
	Locked             number(1,0) NULL,
	LockingUserId      VARCHAR2 (64) NULL,
	ModificationUserId VARCHAR2 (64) NULL,
	ModificationDate   VARCHAR2 (10) NULL,
	ModificationTime   VARCHAR2 (8) NULL,
	Description        VARCHAR2 (1024) NULL,
	versionnumber      number(19,0) NULL,
	filetypeid	   number(19,0) NULL,
	CONSTRAINT PK__UPLOADED__6F0F98BF22751F6C PRIMARY KEY (FileId)
);

CREATE SEQUENCE uploadedfiles_id_seq 
INCREMENT BY 1 START WITH 1 CACHE 20 ;

CREATE TRIGGER uploadedfiles_pk_trg
  BEFORE INSERT ON uploadedfiles FOR EACH ROW
BEGIN 
    IF :NEW.FileId  IS NULL THEN
      SELECT uploadedfiles_id_seq.NEXTVAL INTO :NEW.FileId FROM DUAL;
    END IF;
END;
/

/********* FILE STORED IN DATABASE FEATURE **********/

CREATE TABLE filecontent
(
	id           number(19,0) NOT NULL,
	file_id      number(19,0) NOT NULL,
	file_content BLOB NULL,
	CONSTRAINT PK__FilesCon__3213E83F1BC821DD PRIMARY KEY (id),
	CONSTRAINT UQ__FilesCon__07D884C71EA48E88 UNIQUE (file_id)
);

CREATE SEQUENCE fc_id_seq 
INCREMENT BY 1 START WITH 1 CACHE 20 ;

CREATE TRIGGER fc_pk_trg
  BEFORE INSERT ON filecontent FOR EACH ROW
BEGIN 
    IF :NEW.id IS NULL THEN
      SELECT fc_id_seq.NEXTVAL INTO :NEW.id FROM DUAL;
    END IF;
END;
/

CREATE TABLE directories
(
	id                   number(19,0)  NOT NULL,
	dir_name             VARCHAR2 (255) NOT NULL,
	dir_path             VARCHAR2 (750) NOT NULL,
	creation_user_id     VARCHAR2 (200) NULL,
	creation_date        DATE NULL,
	creation_time        TIMESTAMP NULL,
	modification_user_id VARCHAR2 (200) NULL,
	modification_date    DATE NULL,
	modification_time    TIMESTAMP NULL,
	is_protected         number(1,0) DEFAULT ((0)) NOT NULL,
	cmdr                 VARCHAR2 (2048) NULL,
	cod                  VARCHAR2 (2048) NULL,
	cud                  VARCHAR2 (2048) NULL,
	ccd                  VARCHAR2 (2048) NULL,
	crd                  VARCHAR2 (2048) NULL,
	ctd                  VARCHAR2 (2048) NULL,
	cdd                  VARCHAR2 (2048) NULL,
	cwf                  VARCHAR2 (2048) NULL,
	ccf                  VARCHAR2 (2048) NULL,
	cuf                  VARCHAR2 (2048) NULL,
	cdf                  VARCHAR2 (2048) NULL,
	CONSTRAINT PK_ PRIMARY KEY (id),
	CONSTRAINT UQ__FileMana__89DC233C0EA330E9 UNIQUE (dir_path)
);
CREATE SEQUENCE dir_id_seq 
INCREMENT BY 1 START WITH 1 CACHE 20 ;

CREATE TRIGGER dir_pk_trg
  BEFORE INSERT ON directories FOR EACH ROW
BEGIN 
    IF :NEW.id IS NULL THEN
      SELECT dir_id_seq.NEXTVAL INTO :NEW.id FROM DUAL;
    END IF;
END;
/

/********* FILE VERSIONS FEATURE **********/

CREATE TABLE file_versions
(
	versionid      number(19,0) NOT NULL,
	file_id        number(19,0) NOT NULL,
	version_number number(19,0) NULL,
	fvc_id         number(19,0) NULL,
	file_name      VARCHAR2 (255) NOT NULL,
	cdate          DATE NULL,
	ctime          TIMESTAMP NULL,
	cuser          VARCHAR2 (255) NULL,
	CONSTRAINT PK_X PRIMARY KEY (versionid)
);

CREATE SEQUENCE fv_id_seq 
INCREMENT BY 1 START WITH 1 CACHE 20 ;

CREATE TRIGGER fv_pk_trg
  BEFORE INSERT ON file_versions FOR EACH ROW
BEGIN 
    IF :NEW.versionid IS NULL THEN
      SELECT fv_id_seq.NEXTVAL INTO :NEW.versionid FROM DUAL;
    END IF;
END;
/

CREATE TABLE file_version_content
(
	fvcid      number(19,0) NOT NULL,
	version_id number(19,0) NULL,
	content    BLOB NULL,
	CONSTRAINT PK_Y PRIMARY KEY (fvcid)
);

CREATE SEQUENCE fvc_id_seq 
INCREMENT BY 1 START WITH 1 CACHE 20 ;

CREATE TRIGGER fvc_pk_trg
  BEFORE INSERT ON file_version_content FOR EACH ROW
BEGIN 
    IF :NEW.fvcid IS NULL THEN
      SELECT fvc_id_seq.NEXTVAL INTO :NEW.fvcid FROM DUAL;
    END IF;
END;
/

/********* FILE ARCHIVE TRACKING FEATURE **********/

CREATE TABLE file_archive_tracker
(
	id      number(19,0) NOT NULL,
	fileid number(19,0) NOT NULL,
	versionnumber number(19,0) NOT NULL,
	CONSTRAINT PK_TRACKER PRIMARY KEY (id),
	CONSTRAINT file_archive_tracker_unique UNIQUE(fileid,versionnumber)
);

CREATE SEQUENCE archive_tracker_seq 
INCREMENT BY 1 START WITH 1 CACHE 20 ;

CREATE TRIGGER archive_tracker_pk_trg
  BEFORE INSERT ON file_archive_tracker FOR EACH ROW
BEGIN 
    IF :NEW.id IS NULL THEN
      SELECT archive_tracker_seq.NEXTVAL INTO :NEW.id FROM DUAL;
    END IF;
END;
/

/********* FILE TYPES FEATURE **********/

CREATE TABLE filetype
(
	id      number(19,0) NOT NULL,
	name 	VARCHAR2 (255) NOT NULL,
	appname	VARCHAR2 (255) NULL,
	CONSTRAINT PK_filetype PRIMARY KEY (id),
	CONSTRAINT filetype_unique UNIQUE(name,appname)
);

CREATE SEQUENCE filetype_id_seq 
INCREMENT BY 1 START WITH 1 CACHE 20 ;

CREATE TRIGGER filetype_pk_trg
  BEFORE INSERT ON filetype FOR EACH ROW
BEGIN 
    IF :NEW.id IS NULL THEN
      SELECT filetype_id_seq.NEXTVAL INTO :NEW.id FROM DUAL;
    END IF;
END;
/

/********* FILE TAGS FEATURE **********/

CREATE TABLE tags
(
	id      number(19,0) NOT NULL,
	fileid 	number(19,0) NOT NULL,
	tag	VARCHAR2 (255) NULL,
	CONSTRAINT PK_filetags PRIMARY KEY (id),
	CONSTRAINT filetags_unique UNIQUE(fileid,tag)
);

CREATE SEQUENCE filetags_id_seq 
INCREMENT BY 1 START WITH 1 CACHE 20 ;

CREATE TRIGGER filetags_pk_trg
  BEFORE INSERT ON tags FOR EACH ROW
BEGIN 
    IF :NEW.id IS NULL THEN
      SELECT filetags_id_seq.NEXTVAL INTO :NEW.id FROM DUAL;
    END IF;
END;
/

/********* FILE ACTION HISTORY FEATURE **********/

CREATE TABLE fileactiontype
(
	id      number(19,0) NOT NULL,
	atype 	number(4,0) NOT NULL,
	en	VARCHAR2 (64) NULL,
	de	VARCHAR2 (64) NULL,
	fr	VARCHAR2 (64) NULL,
	CONSTRAINT PK_fileactiontype PRIMARY KEY (id),
	CONSTRAINT fileactiontype_unique UNIQUE(atype)
);

CREATE SEQUENCE fileactiontype_id_seq 
INCREMENT BY 1 START WITH 1 CACHE 20 ;

CREATE TRIGGER fileactiontype_pk_trg
  BEFORE INSERT ON fileactiontype FOR EACH ROW
BEGIN 
    IF :NEW.id IS NULL THEN
      SELECT fileactiontype_id_seq.NEXTVAL INTO :NEW.id FROM DUAL;
    END IF;
END;
/

CREATE TABLE fileactionhistory
(
	id      number(19,0) NOT NULL,
	file_id      number(19,0) NOT NULL,
	actiontype 	number(4,0) NOT NULL,
	usern	VARCHAR2 (256) NULL,
	uname	VARCHAR2 (1024) NULL,
	ddate    DATE NOT NULL,
	ttime 	TIMESTAMP NOT NULL,
	adesc	VARCHAR2 (1600) NULL,
	CONSTRAINT PK_fileactionhistory PRIMARY KEY (id),
	CONSTRAINT fah_fileactiontype_FK1 FOREIGN KEY (actiontype) REFERENCES fileactiontype (atype) ON
  DELETE CASCADE ENABLE
);

CREATE SEQUENCE fileactionhistory_id_seq 
INCREMENT BY 1 START WITH 1 CACHE 20 ;

CREATE TRIGGER fileactionhistory_pk_trg
  BEFORE INSERT ON fileactionhistory FOR EACH ROW
BEGIN 
    IF :NEW.id IS NULL THEN
      SELECT fileactionhistory_id_seq.NEXTVAL INTO :NEW.id FROM DUAL;
    END IF;
END;
/

INSERT INTO fileactiontype (atype,en,de,fr) VALUES (1,'File created', 'Datei kreiert' , 'Fichier créé');
INSERT INTO fileactiontype (atype,en,de,fr) VALUES (2,'File content changed', 'Datei Inhalt geändert' , 'Fichier modifié');
INSERT INTO fileactiontype (atype,en,de,fr) VALUES (3,'File description changed', 'Datei Beschreibung geändert', 'Description du Fichier modifiée');
INSERT INTO fileactiontype (atype,en,de,fr) VALUES (4,'File renamed', 'Datei umbennant' , 'Fichier renommé');
INSERT INTO fileactiontype (atype,en,de,fr) VALUES (5,'File deleted', 'Datei gelöscht' , 'Fichier supprimé');
INSERT INTO fileactiontype (atype,en,de,fr) VALUES (6,'File downloaded', 'Datei heruntergeladen' , 'Fichier téléchargé');
INSERT INTO fileactiontype (atype,en,de,fr) VALUES (7,'File printed', 'Datei gedruckt' , 'Fichier imprimé');
INSERT INTO fileactiontype (atype,en,de,fr) VALUES (8,'File opened', 'Datei geöffnet' , 'Fichier ouvert');
INSERT INTO fileactiontype (atype,en,de,fr) VALUES (9,'File copied and paste', 'Datei kopiert' , 'Fichier copié');
INSERT INTO fileactiontype (atype,en,de,fr) VALUES (10,'File moved', 'Datei verschoben' , 'Fichier déplacé');
INSERT INTO fileactiontype (atype,en,de,fr) VALUES (11,'New Version created', 'Neue Version erfasst' , 'Nouvelle version');
INSERT INTO fileactiontype (atype,en,de,fr) VALUES (12,'Last version rollbacked', 'Letzte Version gelöscht' , 'Dernière version supprimée');

/********* DIRECTORY AND FILETYPES TRANSLATION FEATURES **********/

CREATE TABLE fmlanguages
(
	id      number(19,0) NOT NULL,
	isoname	VARCHAR2 (3) NULL,
	CONSTRAINT PK_fmlanguages PRIMARY KEY (id),
	CONSTRAINT fmlanguages_unique UNIQUE(isoname)
);

CREATE SEQUENCE fmlanguages_id_seq 
INCREMENT BY 1 START WITH 1 CACHE 20 ;

CREATE TRIGGER fmlanguages_pk_trg
  BEFORE INSERT ON fmlanguages FOR EACH ROW
BEGIN 
    IF :NEW.id IS NULL THEN
      SELECT fmlanguages_id_seq.NEXTVAL INTO :NEW.id FROM DUAL;
    END IF;
END;
/

INSERT INTO fmlanguages (isoname) VALUES ('EN');
INSERT INTO fmlanguages (isoname) VALUES ('DE');
INSERT INTO fmlanguages (isoname) VALUES ('FR');

CREATE TABLE dirtranslation
(
	id      number(19,0) NOT NULL,
	translateditemid number(19,0) NOT NULL,
	lang	VARCHAR2 (3) NOT NULL,
	tr	VARCHAR2 (1024) NULL,
	CONSTRAINT PK_dirtranslation PRIMARY KEY (id),
	CONSTRAINT dirtranslation_unique UNIQUE(translateditemid,lang)
);

CREATE SEQUENCE dirtranslation_id_seq 
INCREMENT BY 1 START WITH 1 CACHE 20 ;

CREATE TRIGGER dirtranslation_pk_trg
  BEFORE INSERT ON dirtranslation FOR EACH ROW
BEGIN 
    IF :NEW.id IS NULL THEN
      SELECT dirtranslation_id_seq.NEXTVAL INTO :NEW.id FROM DUAL;
    END IF;
END;
/

CREATE TABLE fttranslation
(
	id      number(19,0) NOT NULL,
	translateditemid number(19,0) NOT NULL,
	lang	VARCHAR2 (3) NOT NULL,
	tr	VARCHAR2 (1024) NULL,
	CONSTRAINT PK_fttranslation PRIMARY KEY (id),
	CONSTRAINT fttranslation_unique UNIQUE(translateditemid,lang)
);

CREATE SEQUENCE fttranslation_id_seq 
INCREMENT BY 1 START WITH 1 CACHE 20 ;

CREATE TRIGGER fttranslation_pk_trg
  BEFORE INSERT ON fttranslation FOR EACH ROW
BEGIN 
    IF :NEW.id IS NULL THEN
      SELECT fttranslation_id_seq.NEXTVAL INTO :NEW.id FROM DUAL;
    END IF;
END;
/

/********* FileLinks Feature **********/

CREATE TABLE "FILE_LINKS" 
   (	"ID" NUMBER(19,0) NOT NULL ENABLE, 
	"FILE_ID" NUMBER(19,0), 
	"CONTENT_ID" NUMBER(19,0), 
	"VERSION_NUMBER" NUMBER(19,0), 
	"VERSION_ID" NUMBER(19,0), 
	"NAME" VARCHAR2(250 BYTE), 
	"CREATIONDATE" DATE DEFAULT sysdate NOT NULL ENABLE, 
	"CREATIONTIME" TIMESTAMP (6) WITH LOCAL TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL ENABLE, 
	"DIRECTORY_ID" NUMBER(19,0), 
	"FILELINKSIZE" VARCHAR2(20 BYTE),
	 CONSTRAINT "FILE_LINKS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE
   ) PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;

CREATE SEQUENCE file_links_id_seq 
INCREMENT BY 1 START WITH 1 CACHE 20 ;

CREATE OR REPLACE TRIGGER "FILE_LINKS_PK_TRG" 
  BEFORE INSERT ON file_links FOR EACH ROW
BEGIN 
    IF :NEW.id IS NULL THEN
      SELECT file_links_id_seq.NEXTVAL INTO :NEW.id FROM DUAL;
    END IF;
END;
/
ALTER TRIGGER "FILE_LINKS_PK_TRG" ENABLE;

/********* HTML Filemanager feature *********/

CREATE TABLE thumbnailcontent
(
  id number(19,0) NOT NULL,
  org_file_id number(19,0) NOT NULL,
  thumb_content blob,
  creation_date VARCHAR2 (10) NULL,
  creation_time VARCHAR2 (8) NULL,
  use_default number(1,0) DEFAULT 0,
  org_modificationdate VARCHAR2 (10) NULL,
  org_modificationtime VARCHAR2 (8) NULL,
  CONSTRAINT thumbnailcontent_pkey PRIMARY KEY (id),
  CONSTRAINT thumbnailcontent_org_fid UNIQUE (org_file_id)
);
CREATE SEQUENCE thumbnailcontent_id_seq 
INCREMENT BY 1 START WITH 1 CACHE 20 ;

CREATE TRIGGER thumbnailcontent_pk_trg
  BEFORE INSERT ON thumbnailcontent FOR EACH ROW
BEGIN 
    IF :NEW.id IS NULL THEN
      SELECT thumbnailcontent_id_seq.NEXTVAL INTO :NEW.id FROM DUAL;
    END IF;
END;
/
